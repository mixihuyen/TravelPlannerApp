import Foundation
import CoreData

class CacheManager {
    static let shared = CacheManager()
    private let coreDataStack = CoreDataStack.shared
    
    // Danh s√°ch c√°c kh√≥a UserDefaults ƒë∆∞·ª£c s·ª≠ d·ª•ng trong ·ª©ng d·ª•ng
    private let userDefaultsKeys: [String] = [
        "authToken","refreshToken", "firstName", "lastName", "username", "userEmail", "userId",
        "trips_cache_timestamp", "next_temp_id",
        "dashboard_cache_",
        "participants_",
        "packing_list_cache_timestamp_", "next_temp_packing_id_", "pending_packing_items_"
        
    ]
    
    // Danh s√°ch c√°c entity Core Data c·∫ßn x√≥a
    private let coreDataEntities: [String] = [
        "TripEntity", "TripDayEntity", "PackingItemEntity"
    ]
    
    private init() {}
    
    // X√≥a to√†n b·ªô cache
    func clearAllCache() {
        // X√≥a t·∫•t c·∫£ UserDefaults keys
        for key in userDefaultsKeys {
            if key.contains("_") {
                // X·ª≠ l√Ω prefix keys (c·∫ßn x√≥a t·∫•t c·∫£ keys c√≥ prefix)
                let allKeys = UserDefaults.standard.dictionaryRepresentation().keys.filter { $0.hasPrefix(key) }
                for prefixedKey in allKeys {
                    UserDefaults.standard.removeObject(forKey: prefixedKey)
                    print("üóëÔ∏è ƒê√£ x√≥a UserDefaults key: \(prefixedKey)")
                }
            } else {
                UserDefaults.standard.removeObject(forKey: key)
                print("üóëÔ∏è ƒê√£ x√≥a UserDefaults key: \(key)")
            }
        }
        
        // X√≥a t·∫•t c·∫£ Core Data entities
        for entity in coreDataEntities {
            clearCoreData(entityName: entity)
        }
        
        // X√≥a RAM cache cho ParticipantViewModel
        ParticipantViewModel.ramCache = [:]
        
        print("üóëÔ∏è ƒê√£ x√≥a to√†n b·ªô cache")
    }
    
    // X√≥a cache Core Data cho m·ªôt entity c·ª• th·ªÉ
    private func clearCoreData(entityName: String) {
        let context = coreDataStack.context
        let fetchRequest: NSFetchRequest<NSFetchRequestResult> = NSFetchRequest(entityName: entityName)
        let deleteRequest = NSBatchDeleteRequest(fetchRequest: fetchRequest)
        do {
            try context.execute(deleteRequest)
            coreDataStack.saveContext()
            print("üóëÔ∏è ƒê√£ x√≥a cache Core Data cho entity: \(entityName)")
        } catch {
            print("‚ùå L·ªói khi x√≥a Core Data cho entity \(entityName): \(error.localizedDescription)")
        }
    }
    
    // L∆∞u timestamp cache
    func saveCacheTimestamp(forKey key: String) {
        UserDefaults.standard.set(Date(), forKey: key)
    }
    
    // L·∫•y timestamp cache
    func loadCacheTimestamp(forKey key: String) -> Date? {
        return UserDefaults.standard.object(forKey: key) as? Date
    }
    
    // X√≥a cache cho key c·ª• th·ªÉ (cho prefix keys)
    func clearCache(forKeyPrefix prefix: String) {
        let allKeys = UserDefaults.standard.dictionaryRepresentation().keys.filter { $0.hasPrefix(prefix) }
        for key in allKeys {
            UserDefaults.standard.removeObject(forKey: key)
            print("üóëÔ∏è ƒê√£ x√≥a cache cho key: \(key)")
        }
    }
}
