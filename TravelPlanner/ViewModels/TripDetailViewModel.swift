import Foundation
import Combine
import SwiftUI

// MARK: - Trip Detail ViewModel
class TripDetailViewModel: ObservableObject {
    let trip: TripModel
    @Published var tripDays: [Date] = []
    @Published var tripDaysData: [TripDay] = []
    @Published var isLoading: Bool = false
    @Published var toastMessage: String? = nil
    @Published var showToast: Bool = false

    private var cancellables = Set<AnyCancellable>()
    private let networkManager = NetworkManager()
    private let dateFormatter: DateFormatter = {
            let formatter = DateFormatter()
            formatter.dateFormat = "yyyy-MM-dd"
        formatter.timeZone = TimeZone(secondsFromGMT: 0)
            return formatter
        }()

    init(trip: TripModel) {
        self.trip = trip
        loadFromCache()
        fetchTripDays()
    }

    // MARK: - Public Methods
    func fetchTripDays(completion: (() -> Void)? = nil, forceRefresh: Bool = false) {
            if !forceRefresh, let cachedTripDays = loadFromCache() {
                print("üìÇ S·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ cache: \(cachedTripDays.map { ($0.day, $0.activities.map { $0.activity }) })")
                self.tripDaysData = cachedTripDays
                self.tripDays = cachedTripDays.compactMap { dateFormatter.date(from: $0.day) }
                completion?()
                return
            }
            
            guard let url = URL(string: "\(APIConfig.baseURL)\(APIConfig.tripsEndpoint)/\(trip.id)/days"),
                  let token = UserDefaults.standard.string(forKey: "authToken") else {
                print("‚ùå URL ho·∫∑c Token kh√¥ng h·ª£p l·ªá")
                isLoading = false
                completion?()
                return
            }
            
            let request = NetworkManager.createRequest(url: url, method: "GET", token: token)
            isLoading = true
            networkManager.performRequest(request, decodeTo: TripDayResponse.self)
                .sink { [weak self] completionResult in
                    self?.isLoading = false
                    self?.handleCompletion(completionResult, completionHandler: completion)
                } receiveValue: { [weak self] response in
                    guard let self = self else { return }
                    if let tripDays = response.data?.tripDays {
                        print("üì° API tr·∫£ v·ªÅ \(tripDays.count) ng√†y:")
                        for day in tripDays {
                            print("üìÖ Ng√†y \(day.day): \(day.activities.map { "\($0.activity) (ID: \($0.id))" })")
                        }
                        self.tripDaysData = tripDays
                        self.tripDays = tripDays.compactMap { self.dateFormatter.date(from: $0.day) }
                        self.saveToCache(tripDays: tripDays)
                        print("üìÖ Fetch trip days th√†nh c√¥ng: \(tripDays.count) ng√†y")
                    } else {
                        print("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu trip days")
                        self.showToast(message: "Kh√¥ng c√≥ d·ªØ li·ªáu ng√†y chuy·∫øn ƒëi")
                    }
                }
                .store(in: &cancellables)
        }

    func activities(for date: Date) -> [TripActivity] {
        let selectedDateString = dateFormatter.string(from: date)
        // L·ªçc t·∫•t c·∫£ ho·∫°t ƒë·ªông c√≥ start_time thu·ªôc ng√†y ƒë∆∞·ª£c ch·ªçn
        let allActivities = tripDaysData.flatMap { $0.activities }
        let filteredActivities = allActivities.filter { activity in
            let startTimeDate = Formatter.apiDateTimeFormatter.date(from: activity.startTime)
            let startTimeDateString = startTimeDate != nil ? dateFormatter.string(from: startTimeDate!) : ""
            return startTimeDateString == selectedDateString
        }
        print("üìã Ho·∫°t ƒë·ªông cho ng√†y \(selectedDateString): \(filteredActivities.map { "\($0.activity) (ID: \($0.id))" })")
        return filteredActivities
    }
    
    func calculateTotalCosts(for date: Date) -> (actualCost: Double, estimatedCost: Double) {
            let activities = activities(for: date)
            let totalActualCost = activities.reduce(0.0) { $0 + $1.actualCost }
            let totalEstimatedCost = activities.reduce(0.0) { $0 + $1.estimatedCost }
            return (totalActualCost, totalEstimatedCost)
        }

    func addActivity(trip: TripModel, date: Date, activity: TripActivity, completion: @escaping (Result<TripActivity, Error>) -> Void) {
            let dateString = dateFormatter.string(from: date)
            guard let tripDay = tripDaysData.first(where: { $0.day == dateString }) else {
                print("‚ùå Kh√¥ng t√¨m th·∫•y trip day cho ng√†y: \(dateString)")
                completion(.failure(NSError(domain: "", code: -1, userInfo: [NSLocalizedDescriptionKey: "Kh√¥ng t√¨m th·∫•y ng√†y chuy·∫øn ƒëi"])))
                return
            }
            
            guard let url = URL(string: "\(APIConfig.baseURL)\(APIConfig.tripsEndpoint)/\(trip.id)/days/\(tripDay.id)/activities"),
                  let token = UserDefaults.standard.string(forKey: "authToken") else {
                print("‚ùå URL ho·∫∑c Token kh√¥ng h·ª£p l·ªá")
                completion(.failure(NSError(domain: "", code: -1, userInfo: [NSLocalizedDescriptionKey: "URL ho·∫∑c Token kh√¥ng h·ª£p l·ªá"])))
                return
            }
            
            // Ki·ªÉm tra ƒë·ªãnh d·∫°ng start_time v√† end_time
            let body: [String: Any] = [
                "activity": activity.activity,
                "address": activity.address,
                "start_time": activity.startTime,
                "end_time": activity.endTime,
                "estimated_cost": activity.estimatedCost,
                "actual_cost": activity.actualCost,
                "note": activity.note
            ]
            
            print("üì§ G·ª≠i body API: \(body)")
            
            guard let jsonData = try? JSONSerialization.data(withJSONObject: body) else {
                print("‚ùå L·ªói khi t·∫°o JSON")
                completion(.failure(NSError(domain: "", code: -1, userInfo: [NSLocalizedDescriptionKey: "L·ªói khi t·∫°o JSON"])))
                return
            }
            
            var request = URLRequest(url: url)
            request.httpMethod = "POST"
            request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
            request.setValue("application/json", forHTTPHeaderField: "Content-Type")
            request.httpBody = jsonData
            
            isLoading = true
            networkManager.performRequest(request, decodeTo: TripActivityResponse.self)
                .sink { [weak self] completionResult in
                    self?.isLoading = false
                    switch completionResult {
                    case .failure(let error):
                        print("‚ùå L·ªói khi th√™m ho·∫°t ƒë·ªông: \(error.localizedDescription)")
                        self?.showToast(message: "L·ªói khi th√™m ho·∫°t ƒë·ªông")
                        completion(.failure(error))
                    case .finished:
                        print("‚úÖ Th√™m ho·∫°t ƒë·ªông ho√†n t·∫•t")
                    }
                } receiveValue: { response in
                    if let addedActivity = response.data {
                        print("üìÖ Th√™m ho·∫°t ƒë·ªông th√†nh c√¥ng: \(addedActivity.activity)")
                        completion(.success(addedActivity))
                    } else {
                        let error = NSError(domain: "", code: -1, userInfo: [NSLocalizedDescriptionKey: "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu ho·∫°t ƒë·ªông"])
                        print("‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu ho·∫°t ƒë·ªông")
                        completion(.failure(error))
                    }
                }
                .store(in: &cancellables)
        }
    func updateActivity(trip: TripModel, date: Date, activity: TripActivity, completion: @escaping (Result<TripActivity, Error>) -> Void) {
        let dateString = dateFormatter.string(from: date)
        print("üìÖ DateString: \(dateString), Available TripDays: \(tripDaysData.map { $0.day })")
        
        guard let tripDay = tripDaysData.first(where: { $0.day == dateString }) else {
            print("‚ùå Kh√¥ng t√¨m th·∫•y trip day cho ng√†y: \(dateString)")
            completion(.failure(NSError(domain: "", code: -1, userInfo: [NSLocalizedDescriptionKey: "Kh√¥ng t√¨m th·∫•y ng√†y chuy·∫øn ƒëi"])))
            return
        }
        
        guard let url = URL(string: "\(APIConfig.baseURL)\(APIConfig.tripsEndpoint)/\(trip.id)/days/\(tripDay.id)/activities/\(activity.id)"),
              let token = UserDefaults.standard.string(forKey: "authToken") else {
            print("‚ùå URL ho·∫∑c Token kh√¥ng h·ª£p l·ªá")
            completion(.failure(NSError(domain: "", code: -1, userInfo: [NSLocalizedDescriptionKey: "URL ho·∫∑c Token kh√¥ng h·ª£p l·ªá"])))
            return
        }
        
        print("üìç URL: \(url.absoluteString)")
        print("üîë Token: \(token)")
        
        let body: [String: Any] = [
            "activity": activity.activity,
            "address": activity.address,
            "start_time": activity.startTime,
            "end_time": activity.endTime,
            "estimated_cost": Int(activity.estimatedCost),
            "actual_cost": Int(activity.actualCost),
            "note": activity.note
        ]
        
        print("üì§ G·ª≠i body API c·∫≠p nh·∫≠t: \(body)")
        
        guard let jsonData = try? JSONSerialization.data(withJSONObject: body) else {
            print("‚ùå L·ªói khi t·∫°o JSON")
            completion(.failure(NSError(domain: "", code: -1, userInfo: [NSLocalizedDescriptionKey: "L·ªói khi t·∫°o JSON"])))
            return
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "PATCH"
        request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.httpBody = jsonData
        
        isLoading = true
        networkManager.performRequest(request, decodeTo: TripActivityUpdateResponse.self)
            .sink { [weak self] completionResult in
                self?.isLoading = false
                switch completionResult {
                case .failure(let error):
                    print("‚ùå L·ªói khi c·∫≠p nh·∫≠t ho·∫°t ƒë·ªông: \(error.localizedDescription)")
                    self?.showToast(message: "L·ªói khi c·∫≠p nh·∫≠t ho·∫°t ƒë·ªông")
                    completion(.failure(error))
                case .finished:
                    print("‚úÖ C·∫≠p nh·∫≠t ho·∫°t ƒë·ªông ho√†n t·∫•t")
                }
            } receiveValue: { response in
                if let updatedActivity = response.data?.updatedActivity {
                    print("üìÖ C·∫≠p nh·∫≠t ho·∫°t ƒë·ªông th√†nh c√¥ng: \(updatedActivity.activity)")
                    self.showToast(message: "C·∫≠p nh·∫≠t ho·∫°t ƒë·ªông th√†nh c√¥ng")
                    completion(.success(updatedActivity))
                } else {
                    let error = NSError(domain: "", code: -1, userInfo: [NSLocalizedDescriptionKey: "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu ho·∫°t ƒë·ªông"])
                    print("‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu ho·∫°t ƒë·ªông")
                    completion(.failure(error))
                }
            }
            .store(in: &cancellables)
    }

    // MARK: - Private Methods
    private func handleCompletion(_ completion: Subscribers.Completion<Error>, completionHandler: (() -> Void)? = nil) {
        switch completion {
        case .failure(let error):
            print("‚ùå L·ªói khi fetch trip days: \(error.localizedDescription)")
            if let decodingError = error as? DecodingError {
                switch decodingError {
                case .dataCorrupted(let context):
                    print("üîç Data corrupted: \(context.debugDescription)")
                case .keyNotFound(let key, let context):
                    print("üîç Key '\(key)' not found: \(context.debugDescription)")
                case .typeMismatch(let type, let context):
                    print("üîç Type '\(type)' mismatch: \(context.debugDescription)")
                case .valueNotFound(let type, let context):
                    print("üîç Value '\(type)' not found: \(context.debugDescription)")
                @unknown default:
                    print("üîç L·ªói decode kh√¥ng x√°c ƒë·ªãnh")
                }
            }
            showToast(message: "L·ªói khi t·∫£i d·ªØ li·ªáu ng√†y chuy·∫øn ƒëi")
        case .finished:
            print("‚úÖ Fetch trip days ho√†n t·∫•t")
        }
        completionHandler?()
    }

    private func saveToCache(tripDays: [TripDay]) {
        do {
            let data = try JSONEncoder().encode(tripDays)
            UserDefaults.standard.set(data, forKey: "trip_days_cache_\(trip.id)")
        } catch {
            print("‚ùå L·ªói khi l∆∞u cache trip days: \(error.localizedDescription)")
            showToast(message: "L·ªói khi l∆∞u cache d·ªØ li·ªáu")
        }
    }

    private func loadFromCache() -> [TripDay]? {
        guard let data = UserDefaults.standard.data(forKey: "trip_days_cache_\(trip.id)") else {
            return nil
        }
        do {
            let tripDays = try JSONDecoder().decode([TripDay].self, from: data)
            return tripDays
        } catch {
            print("‚ùå L·ªói khi ƒë·ªçc cache trip days: \(error.localizedDescription)")
            return nil
        }
    }

    private func showToast(message: String) {
        print("üì¢ ƒê·∫∑t toast: \(message)")
        toastMessage = message
        showToast = true
        DispatchQueue.main.asyncAfter(deadline: .now() + 2) {
            print("üì¢ ·∫®n toast")
            self.showToast = false
            self.toastMessage = nil
        }
    }
}
