import Foundation
import Combine

struct WeatherData: Codable {
    let maxTemp: Int
    let minTemp: Int
    let condition: String
}

struct LocationSuggestion: Codable, Identifiable {
    let id: Int
    let name: String
    let region: String
    let country: String
    let lat: Double
    let lon: Double
}

class WeatherViewModel: ObservableObject {
    @Published var weatherData: WeatherData?
        @Published var isLoading: Bool = false
        @Published var errorMessage: String?
        @Published var locationSuggestions: [LocationSuggestion] = []
        private var cancellables = Set<AnyCancellable>()
        private let networkManager = NetworkManager()
        public var location: String
        private let tripId: Int // Kh√¥ng optional
        private let tripDayId: Int // Kh√¥ng optional
        private var date: Date?
        private let dateFormatter: DateFormatter = {
            let formatter = DateFormatter()
            formatter.dateFormat = "yyyy-MM-dd"
            formatter.timeZone = TimeZone(secondsFromGMT: 0)
            return formatter
        }()
    
    init(location: String, tripId: Int, tripDayId: Int) {
            self.location = location
            self.tripId = tripId
            self.tripDayId = tripDayId
            if NetworkManager.isConnected() {
                fetchTripDayDate { [weak self] in
                    self?.fetchWeather()
                }
            } else {
                self.errorMessage = "Kh√¥ng c√≥ k·∫øt n·ªëi m·∫°ng"
                print("üåê M·∫•t k·∫øt n·ªëi m·∫°ng, kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt")
            }
        }
    init(location: String) {
            self.location = location
            self.tripId = 0
            self.tripDayId = 0
            self.date = nil
            print("üìç WeatherViewModel initialized for location search with location: \(location)")
        }
    
    private func fetchTripDayDate(completion: @escaping () -> Void) {
            guard NetworkManager.isConnected() else {
                self.errorMessage = "Kh√¥ng c√≥ k·∫øt n·ªëi m·∫°ng"
                self.date = nil
                print("üåê M·∫•t k·∫øt n·ªëi m·∫°ng, kh√¥ng th·ªÉ l·∫•y ng√†y t·ª´ API")
                completion()
                return
            }

            guard let url = URL(string: "\(APIConfig.baseURL)\(APIConfig.tripsEndpoint)/\(tripId)/days/\(tripDayId)") else {
                self.errorMessage = "URL kh√¥ng h·ª£p l·ªá"
                self.date = nil
                print("‚ùå URL kh√¥ng h·ª£p l·ªá: \(APIConfig.baseURL)\(APIConfig.tripsEndpoint)/\(tripId)/days/\(tripDayId)")
                completion()
                return
            }

            // L·∫•y token t·ª´ UserDefaults (gi·ªëng TripDetailViewModel)
            guard let token = UserDefaults.standard.string(forKey: "authToken") else {
                self.errorMessage = "Kh√¥ng c√≥ token x√°c th·ª±c"
                self.date = nil
                print("‚ùå Kh√¥ng c√≥ token x√°c th·ª±c")
                completion()
                return
            }

            let request = NetworkManager.createRequest(url: url, method: "GET", token: token)
            isLoading = true

            networkManager.performRequest(request, decodeTo: SingleTripDayResponse.self)
            .sink { [weak self] completionResult in
                            self?.isLoading = false
                            switch completionResult {
                            case .failure(let error):
                                print("‚ùå L·ªói khi l·∫•y ng√†y t·ª´ API: \(error.localizedDescription)")
                                // Ki·ªÉm tra l·ªói HTTP 401 qua URLError
                                if let urlError = error as? URLError, urlError.code == .userAuthenticationRequired {
                                    self?.errorMessage = "Kh√¥ng ƒë∆∞·ª£c ph√©p truy c·∫≠p d·ªØ li·ªáu ng√†y. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i."
                                } else {
                                    self?.errorMessage = "L·ªói khi t·∫£i ng√†y: \(error.localizedDescription)"
                                }
                                self?.date = nil
                            case .finished:
                                print("‚úÖ L·∫•y ng√†y t·ª´ API th√†nh c√¥ng")
                            }
                            completion()
                        } receiveValue: { [weak self] response in
                            guard let self = self else { return }
                            if response.success, let date = dateFormatter.date(from: response.data.day) {
                                self.date = date
                                print("üìÖ L·∫•y ƒë∆∞·ª£c ng√†y t·ª´ API: \(response.data.day)")
                            } else {
                                // S·ª≠ d·ª•ng response.message cho l·ªói t·ª´ API
                                let errorMessage = response.statusCode == 401 ?
                                    "Kh√¥ng ƒë∆∞·ª£c ph√©p truy c·∫≠p d·ªØ li·ªáu ng√†y. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i." :
                                    response.message
                                self.errorMessage = errorMessage
                                self.date = nil
                                print("‚ö†Ô∏è \(errorMessage): \(response.data.day)")
                            }
                        }
                        .store(in: &cancellables)
        }
    
    func fetchWeather() {
            guard let date = self.date else {
                self.errorMessage = "Kh√¥ng c√≥ ng√†y h·ª£p l·ªá ƒë·ªÉ l·∫•y th·ªùi ti·∫øt"
                self.weatherData = nil
                print("‚ö†Ô∏è Kh√¥ng c√≥ ng√†y ƒë·ªÉ l·∫•y th·ªùi ti·∫øt")
                return
            }

            guard NetworkManager.isConnected() else {
                self.errorMessage = "Kh√¥ng c√≥ k·∫øt n·ªëi m·∫°ng"
                self.weatherData = nil
                print("üåê M·∫•t k·∫øt n·ªëi m·∫°ng, kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt")
                return
            }

            let dateString = dateFormatter.string(from: date)
            let encodedLocation = location.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed) ?? ""
            guard let url = URL(string: "http://api.weatherapi.com/v1/forecast.json?key=\(APIConfig.weatherAPI)&q=\(encodedLocation)&dt=\(dateString)&days=1") else {
                self.errorMessage = "URL kh√¥ng h·ª£p l·ªá"
                self.weatherData = nil
                print("‚ùå URL kh√¥ng h·ª£p l·ªá: \(location), \(dateString)")
                return
            }

            let request = NetworkManager.createRequest(url: url, method: "GET", token: "")
            isLoading = true

            networkManager.performRequest(request, decodeTo: WeatherResponse.self)
                .sink { [weak self] completion in
                    self?.isLoading = false
                    switch completion {
                    case .failure(let error):
                        print("‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt: \(error.localizedDescription)")
                        self?.errorMessage = "L·ªói khi t·∫£i d·ªØ li·ªáu th·ªùi ti·∫øt"
                        self?.weatherData = nil
                    case .finished:
                        print("‚úÖ L·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt th√†nh c√¥ng")
                    }
                } receiveValue: { [weak self] response in
                    guard let self = self, let forecastDay = response.forecast.forecastday.first else {
                        self?.errorMessage = "Kh√¥ng c√≥ d·ªØ li·ªáu d·ª± b√°o"
                        self?.weatherData = nil
                        print("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu d·ª± b√°o cho \(self?.location ?? "") ng√†y \(dateString)")
                        return
                    }

                    let weather = WeatherData(
                        maxTemp: Int(forecastDay.day.maxtemp_c),
                        minTemp: Int(forecastDay.day.mintemp_c),
                        condition: forecastDay.day.condition.text
                    )

                    self.weatherData = weather
                    print("üå§Ô∏è ƒê√£ l·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt: \(weather.maxTemp)¬∞C / \(weather.minTemp)¬∞C, \(weather.condition)")
                }
                .store(in: &cancellables)
        }
    
    func searchLocations(query: String) {
        guard !query.isEmpty, NetworkManager.isConnected() else {
            self.locationSuggestions = []
            print("üåê Kh√¥ng c√≥ m·∫°ng ho·∫∑c query r·ªóng")
            return
        }
        
        guard let url = URL(string: "http://api.weatherapi.com/v1/search.json?key=\(APIConfig.weatherAPI)&q=\(query.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed) ?? "")") else {
            self.locationSuggestions = []
            print("‚ùå URL t√¨m ki·∫øm kh√¥ng h·ª£p l·ªá: \(query)")
            return
        }
        
        let request = NetworkManager.createRequest(url: url, method: "GET", token: "")
        
        networkManager.performRequest(request, decodeTo: [LocationSuggestion].self)
            .sink { [weak self] completion in
                switch completion {
                case .failure(let error):
                    print("‚ùå L·ªói khi t√¨m ki·∫øm ƒë·ªãa ƒëi·ªÉm: \(error.localizedDescription)")
                    self?.locationSuggestions = []
                case .finished:
                    print("‚úÖ T√¨m ki·∫øm ƒë·ªãa ƒëi·ªÉm th√†nh c√¥ng")
                }
            } receiveValue: { [weak self] suggestions in
                self?.locationSuggestions = suggestions
                print("üìç Nh·∫≠n ƒë∆∞·ª£c \(suggestions.count) g·ª£i √Ω ƒë·ªãa ƒëi·ªÉm: \(suggestions.map { $0.name })")
            }
            .store(in: &cancellables)
    }
    
    func updateLocation(_ newLocation: String) {
            self.location = newLocation
            self.weatherData = nil
            if tripId != 0 && tripDayId != 0 {
                fetchTripDayDate { [weak self] in
                    self?.fetchWeather()
                }
            }
        }
        
        func updateDate(_ newDate: Date) {
            self.date = newDate
            self.weatherData = nil // X√≥a d·ªØ li·ªáu c≈© khi thay ƒë·ªïi ng√†y
            fetchWeather()
        }
    
}

struct WeatherResponse: Codable {
    struct Forecast: Codable {
        let forecastday: [ForecastDay]
    }
    struct ForecastDay: Codable {
        let day: Day
    }
    struct Day: Codable {
        let maxtemp_c: Double
        let mintemp_c: Double
        let condition: Condition
    }
    struct Condition: Codable {
        let text: String
    }
    let forecast: Forecast
}
