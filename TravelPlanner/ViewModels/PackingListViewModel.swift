import Foundation
import Combine
import SwiftUI

class PackingListViewModel: ObservableObject {
    @Published var packingList: PackingList
    @Published var participants: [Participant] = []
    @Published var isLoading: Bool = false
    @Published var toastMessage: String? = nil
    @Published var showToast: Bool = false

    private var cancellables = Set<AnyCancellable>()
    private let networkManager = NetworkManager()
    private let participantViewModel: ParticipantViewModel
    private let tripId: Int

    init(tripId: Int) {
        self.tripId = tripId
        self.packingList = PackingList(sharedItems: [], personalItems: [])
        self.participantViewModel = ParticipantViewModel()
        UserDefaults.standard.removeObject(forKey: "packing_list_cache_\(tripId)")
        loadFromCache()
        
        // ƒêƒÉng k√Ω l·∫Øng nghe thay ƒë·ªïi c·ªßa participants
        participantViewModel.$participants
            .sink { [weak self] newParticipants in
                guard let self else { return }
                print("üë• Detected participants change: \(newParticipants.map { "\($0.user.id): \($0.user.username), \(String(describing: $0.user.firstName)) \(String(describing: $0.user.lastName))" })")
                self.participants = newParticipants
                
                // Ki·ªÉm tra v√† b·ªè g√°n c√°c v·∫≠t d·ª•ng c√≥ userId kh√¥ng h·ª£p l·ªá
                let validUserIds = Set(newParticipants.map { $0.user.id })
                var needsUpdate = false
                
                packingList.sharedItems = packingList.sharedItems.map { item in
                    var updatedItem = item
                    if let userId = item.userId, !validUserIds.contains(userId) {
                        updatedItem.userId = nil
                        needsUpdate = true
                        print("‚ö†Ô∏è Invalid userId=\(userId) in shared item \(item.name), setting to nil")
                        self.updatePackingItem(
                            itemId: item.id,
                            name: item.name,
                            quantity: item.quantity,
                            isShared: item.isShared,
                            isPacked: item.isPacked,
                            userId: nil
                        ) {
                            print("‚úÖ ƒê√£ c·∫≠p nh·∫≠t userId=nil cho shared item \(item.id) qua API")
                        } onError: { error in
                            print("‚ùå L·ªói khi c·∫≠p nh·∫≠t shared item \(item.id): \(error.localizedDescription)")
                        }
                    }
                    return updatedItem
                }
                
                packingList.personalItems = packingList.personalItems.map { item in
                    var updatedItem = item
                    if let userId = item.userId, !validUserIds.contains(userId) {
                        updatedItem.userId = nil
                        needsUpdate = true
                        print("‚ö†Ô∏è Invalid userId=\(userId) in personal item \(item.name), setting to nil")
                        self.updatePackingItem(
                            itemId: item.id,
                            name: item.name,
                            quantity: item.quantity,
                            isShared: item.isShared,
                            isPacked: item.isPacked,
                            userId: nil
                        ) {
                            print("‚úÖ ƒê√£ c·∫≠p nh·∫≠t userId=nil cho personal item \(item.id) qua API")
                        } onError: { error in
                            print("‚ùå L·ªói khi c·∫≠p nh·∫≠t personal item \(item.id): \(error.localizedDescription)")
                        }
                    }
                    return updatedItem
                }
                
                if needsUpdate {
                    // X√≥a cache v√† l√†m m·ªõi t·ª´ API
                    UserDefaults.standard.removeObject(forKey: "packing_list_cache_\(self.tripId)")
                    print("üóëÔ∏è ƒê√£ x√≥a cache packing list do thay ƒë·ªïi participants")
                    self.fetchPackingList {
                        print("‚úÖ ƒê√£ l√†m m·ªõi packing list t·ª´ API sau khi c·∫≠p nh·∫≠t participants")
                        self.saveToCache(packingList: self.packingList)
                        self.showToast(message: "ƒê√£ c·∫≠p nh·∫≠t danh s√°ch v·∫≠t d·ª•ng sau khi thay ƒë·ªïi th√†nh vi√™n")
                    }
                }
            }
            .store(in: &cancellables)
        
        fetchParticipants {
            self.fetchPackingList()
        }
    }

    func unassignItemsForUser(userId: Int, completion: (() -> Void)? = nil) {
        print("üîÑ B·∫Øt ƒë·∫ßu b·ªè g√°n c√°c v·∫≠t d·ª•ng cho userId=\(userId)")
        let group = DispatchGroup()
        var updateSuccess = true
        let itemsToUnassign = packingList.sharedItems.filter { $0.userId == userId } + packingList.personalItems.filter { $0.userId == userId }
        
        if itemsToUnassign.isEmpty {
            print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y v·∫≠t d·ª•ng n√†o ƒë∆∞·ª£c g√°n cho userId=\(userId)")
            fetchPackingList {
                print("‚úÖ ƒê√£ l√†m m·ªõi danh s√°ch v·∫≠t d·ª•ng sau khi ki·ªÉm tra b·ªè g√°n")
                completion?()
            }
            return
        }

        // S·ª≠ d·ª•ng semaphore ƒë·ªÉ ki·ªÉm so√°t s·ªë l∆∞·ª£ng request ƒë·ªìng th·ªùi
        let semaphore = DispatchSemaphore(value: 4) // Gi·ªõi h·∫°n 4 request ƒë·ªìng th·ªùi
        for item in itemsToUnassign {
            semaphore.wait()
            group.enter()
            print("üì§ G·ª≠i y√™u c·∫ßu b·ªè g√°n cho v·∫≠t d·ª•ng \(item.name) (ID: \(item.id))")
            updatePackingItem(
                itemId: item.id,
                name: item.name,
                quantity: item.quantity,
                isShared: item.isShared,
                isPacked: item.isPacked,
                userId: nil
            ) { [weak self] in
                defer {
                    group.leave()
                    semaphore.signal()
                }
                guard let self else {
                    updateSuccess = false
                    print("‚ùå L·ªói: self b·ªã gi·∫£i ph√≥ng khi c·∫≠p nh·∫≠t v·∫≠t d·ª•ng \(item.id)")
                    return
                }
                if let index = self.packingList.sharedItems.firstIndex(where: { $0.id == item.id }) {
                    self.packingList.sharedItems[index].userId = nil
                    print("‚úÖ ƒê√£ c·∫≠p nh·∫≠t local userId=nil cho v·∫≠t d·ª•ng chung \(item.name) (ID: \(item.id))")
                } else if let index = self.packingList.personalItems.firstIndex(where: { $0.id == item.id }) {
                    self.packingList.personalItems[index].userId = nil
                    print("‚úÖ ƒê√£ c·∫≠p nh·∫≠t local userId=nil cho v·∫≠t d·ª•ng c√° nh√¢n \(item.name) (ID: \(item.id))")
                } else {
                    updateSuccess = false
                    print("‚ùå Kh√¥ng t√¨m th·∫•y v·∫≠t d·ª•ng \(item.name) (ID: \(item.id)) trong danh s√°ch")
                }
                self.saveToCache(packingList: self.packingList)
            } onError: { [weak self] error in
                defer {
                    group.leave()
                    semaphore.signal()
                }
                guard let self else { return }
                updateSuccess = false
                print("‚ùå L·ªói khi c·∫≠p nh·∫≠t v·∫≠t d·ª•ng \(item.id): \(error.localizedDescription)")
            }
        }

        group.notify(queue: .main) { [weak self] in
            guard let self else {
                print("‚ùå L·ªói: self b·ªã gi·∫£i ph√≥ng khi ho√†n t·∫•t b·ªè g√°n")
                completion?()
                return
            }
            if updateSuccess {
                print("‚úÖ Ho√†n t·∫•t b·ªè g√°n c√°c v·∫≠t d·ª•ng cho userId=\(userId)")
                self.showToast(message: "ƒê√£ b·ªè g√°n c√°c v·∫≠t d·ª•ng cho th√†nh vi√™n")
            } else {
                print("‚ùå C√≥ l·ªói khi b·ªè g√°n c√°c v·∫≠t d·ª•ng cho userId=\(userId)")
                self.showToast(message: "L·ªói khi b·ªè g√°n v·∫≠t d·ª•ng")
            }
            self.fetchPackingList {
                print("‚úÖ ƒê√£ l√†m m·ªõi danh s√°ch v·∫≠t d·ª•ng sau khi b·ªè g√°n")
                completion?()
            }
        }
    }

    func fetchPackingList(completion: (() -> Void)? = nil) {
        guard let url = URL(string: "\(APIConfig.baseURL)\(APIConfig.tripsEndpoint)/\(tripId)/items"),
              let token = UserDefaults.standard.string(forKey: "authToken") else {
            print("‚ùå Invalid URL or Token")
            showToast(message: "URL ho·∫∑c token kh√¥ng h·ª£p l·ªá")
            isLoading = false
            completion?()
            return
        }

        // X√≥a cache ƒë·ªÉ ƒë·∫£m b·∫£o l·∫•y d·ªØ li·ªáu m·ªõi t·ª´ API
        UserDefaults.standard.removeObject(forKey: "packing_list_cache_\(tripId)")
        print("üóëÔ∏è ƒê√£ x√≥a cache packing list cho tripId=\(tripId) tr∆∞·ªõc khi fetch")

        let request = NetworkManager.createRequest(url: url, method: "GET", token: token)
        isLoading = true
        networkManager.performRequest(request, decodeTo: PackingListResponse.self)
            .sink { [weak self] completionResult in
                self?.isLoading = false
                self?.handleCompletion(completionResult, completionHandler: completion)
            } receiveValue: { [weak self] response in
                guard let self, response.success else {
                    print("‚ùå Failed to fetch packing list")
                    self?.showToast(message: "Kh√¥ng th·ªÉ t·∫£i danh s√°ch ƒë·ªì")
                    completion?()
                    return
                }
                let items = response.data.tripItems.map { item in
                    PackingItem(
                        id: item.id,
                        name: item.name,
                        isPacked: item.isPacked,
                        isShared: item.isShared,
                        userId: item.userId,
                        quantity: item.quantity,
                        note: item.note
                    )
                }
                self.packingList = PackingList(
                    sharedItems: items.filter { $0.isShared },
                    personalItems: items.filter { !$0.isShared }
                )
                self.saveToCache(packingList: self.packingList)
                print("üìã Successfully fetched packing list: \(items.count) items (\(self.packingList.sharedItems.count) shared, \(self.packingList.personalItems.count) personal)")
                completion?()
            }
            .store(in: &cancellables)
    }

    func createPackingItem(name: String, quantity: Int, isShared: Bool, isPacked: Bool = false, userId: Int? = nil, completion: (() -> Void)? = nil) {
        guard !name.isEmpty else {
            print("‚ùå T√™n v·∫≠t d·ª•ng r·ªóng")
            showToast(message: "Vui l√≤ng nh·∫≠p t√™n v·∫≠t d·ª•ng")
            completion?()
            return
        }
        
        guard let url = URL(string: "\(APIConfig.baseURL)\(APIConfig.tripsEndpoint)/\(tripId)/items"),
              let token = UserDefaults.standard.string(forKey: "authToken") else {
            print("‚ùå URL ho·∫∑c token kh√¥ng h·ª£p l·ªá")
            showToast(message: "URL ho·∫∑c token kh√¥ng h·ª£p l·ªá")
            completion?()
            return
        }

        let body = CreatePackingItemRequest(name: name, quantity: quantity, isShared: isShared, isPacked: isPacked, userId: userId)
        
        do {
            let bodyData = try JSONEncoder().encode(body)
            if let jsonString = String(data: bodyData, encoding: .utf8) {
                print("üì§ Sending create request: \(jsonString)")
            }
            let request = NetworkManager.createRequest(url: url, method: "POST", token: token, body: bodyData)
            isLoading = true
            
            networkManager.performRequest(request, decodeTo: CreatePackingItemResponse.self)
                .sink { [weak self] completionResult in
                    self?.isLoading = false
                    self?.handleCompletion(completionResult, completionHandler: completion)
                } receiveValue: { [weak self] response in
                    guard let self, response.success else {
                        print("‚ùå L·ªói API khi t·∫°o v·∫≠t d·ª•ng")
                        self?.showToast(message: "Kh√¥ng th·ªÉ t·∫°o v·∫≠t d·ª•ng")
                        completion?()
                        return
                    }

                    let data = response.data
                    let newItem = PackingItem(
                        id: data.id,
                        name: data.name,
                        isPacked: data.isPacked,
                        isShared: data.isShared,
                        userId: data.userId,
                        quantity: data.quantity,
                        note: data.note
                    )

                    if newItem.isShared {
                        self.packingList.sharedItems.append(newItem)
                    } else {
                        self.packingList.personalItems.append(newItem)
                    }

                    self.saveToCache(packingList: self.packingList)
                    self.showToast(message: "ƒê√£ t·∫°o v·∫≠t d·ª•ng \(newItem.name) th√†nh c√¥ng")
                    print("‚úÖ ƒê√£ t·∫°o v·∫≠t d·ª•ng: \(newItem.name) (ID: \(newItem.id))")
                    completion?()
                }
                .store(in: &cancellables)
        } catch {
            print("‚ùå L·ªói m√£ h√≥a d·ªØ li·ªáu: \(error.localizedDescription)")
            showToast(message: "L·ªói khi chu·∫©n b·ªã d·ªØ li·ªáu")
            completion?()
        }
    }

    func updatePackingItem(itemId: Int, name: String, quantity: Int, isShared: Bool, isPacked: Bool, userId: Int?, completion: @escaping () -> Void, onError: @escaping (Error) -> Void = { _ in }) {
        guard !name.isEmpty else {
            print("‚ùå T√™n v·∫≠t d·ª•ng r·ªóng")
            showToast(message: "Vui l√≤ng nh·∫≠p t√™n v·∫≠t d·ª•ng")
            onError(NSError(domain: "", code: -1, userInfo: [NSLocalizedDescriptionKey: "T√™n v·∫≠t d·ª•ng r·ªóng"]))
            return
        }
        
        guard let url = URL(string: "\(APIConfig.baseURL)\(APIConfig.tripsEndpoint)/\(tripId)/items/\(itemId)"),
              let token = UserDefaults.standard.string(forKey: "authToken") else {
            print("‚ùå URL ho·∫∑c token kh√¥ng h·ª£p l·ªá")
            showToast(message: "URL ho·∫∑c token kh√¥ng h·ª£p l·ªá")
            onError(NSError(domain: "", code: -1, userInfo: [NSLocalizedDescriptionKey: "URL ho·∫∑c token kh√¥ng h·ª£p l·ªá"]))
            return
        }

        let body = UpdatePackingItemRequest(name: name, quantity: quantity, isShared: isShared, isPacked: isPacked, userId: userId)
        
        do {
            let bodyData = try JSONEncoder().encode(body)
            if let jsonString = String(data: bodyData, encoding: .utf8) {
                print("üì§ Sending update request for item \(itemId): \(jsonString)")
            }
            let request = NetworkManager.createRequest(url: url, method: "PATCH", token: token, body: bodyData)
            isLoading = true
            
            networkManager.performRequest(request, decodeTo: UpdatePackingItemResponse.self)
                .sink { [weak self] completionResult in
                    self?.isLoading = false
                    switch completionResult {
                    case .failure(let error):
                        print("‚ùå L·ªói API khi c·∫≠p nh·∫≠t v·∫≠t d·ª•ng \(itemId): \(error.localizedDescription)")
                        onError(error)
                    case .finished:
                        print("‚úÖ Request completed")
                    }
                } receiveValue: { [weak self] response in
                    guard let self, response.success else {
                        print("‚ùå L·ªói API khi c·∫≠p nh·∫≠t v·∫≠t d·ª•ng \(itemId)")
                        self?.showToast(message: "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t v·∫≠t d·ª•ng")
                        onError(NSError(domain: "", code: -1, userInfo: [NSLocalizedDescriptionKey: "L·ªói API"]))
                        return
                    }

                    let updatedItem = PackingItem(
                        id: response.data.updatedItem.id,
                        name: response.data.updatedItem.name,
                        isPacked: response.data.updatedItem.isPacked,
                        isShared: response.data.updatedItem.isShared,
                        userId: response.data.updatedItem.userId,
                        quantity: response.data.updatedItem.quantity,
                        note: response.data.updatedItem.note
                    )

                    if let index = self.packingList.sharedItems.firstIndex(where: { $0.id == itemId }) {
                        if updatedItem.isShared {
                            self.packingList.sharedItems[index] = updatedItem
                        } else {
                            self.packingList.sharedItems.remove(at: index)
                            self.packingList.personalItems.append(updatedItem)
                        }
                    } else if let index = self.packingList.personalItems.firstIndex(where: { $0.id == itemId }) {
                        if updatedItem.isShared {
                            self.packingList.personalItems.remove(at: index)
                            self.packingList.sharedItems.append(updatedItem)
                        } else {
                            self.packingList.personalItems[index] = updatedItem
                        }
                    }

                    self.saveToCache(packingList: self.packingList)
                    print("‚úÖ ƒê√£ c·∫≠p nh·∫≠t v·∫≠t d·ª•ng \(itemId): name=\(updatedItem.name), userId=\(String(describing: updatedItem.userId)), isPacked=\(updatedItem.isPacked)")
                    completion()
                }
                .store(in: &cancellables)
        } catch {
            print("‚ùå L·ªói m√£ h√≥a d·ªØ li·ªáu: \(error.localizedDescription)")
            showToast(message: "L·ªói khi chu·∫©n b·ªã d·ªØ li·ªáu")
            onError(error)
        }
    }

    func deletePackingItem(itemId: Int, completion: (() -> Void)? = nil) {
        guard let url = URL(string: "\(APIConfig.baseURL)\(APIConfig.tripsEndpoint)/\(tripId)/items/\(itemId)"),
              let token = UserDefaults.standard.string(forKey: "authToken") else {
            print("‚ùå Invalid URL or Token for delete request")
            showToast(message: "URL ho·∫∑c token kh√¥ng h·ª£p l·ªá")
            completion?()
            return
        }

        let request = NetworkManager.createRequest(url: url, method: "DELETE", token: token)
        isLoading = true
        print("üì§ Sending delete request for item \(itemId)")
        
        networkManager.performRequest(request, decodeTo: DeletePackingItemResponse.self)
            .sink { [weak self] completionResult in
                self?.isLoading = false
                self?.handleCompletion(completionResult, completionHandler: completion)
            } receiveValue: { [weak self] response in
                guard let self, response.success else {
                    print("‚ùå L·ªói API khi x√≥a v·∫≠t d·ª•ng \(itemId): \(response.message)")
                    self?.showToast(message: response.message)
                    completion?()
                    return
                }

                if let index = self.packingList.sharedItems.firstIndex(where: { $0.id == itemId }) {
                    let itemName = self.packingList.sharedItems[index].name
                    self.packingList.sharedItems.remove(at: index)
                    self.showToast(message: "ƒê√£ x√≥a v·∫≠t d·ª•ng \(itemName)")
                    print("‚úÖ ƒê√£ x√≥a v·∫≠t d·ª•ng \(itemId) kh·ªèi danh s√°ch chung")
                } else if let index = self.packingList.personalItems.firstIndex(where: { $0.id == itemId }) {
                    let itemName = self.packingList.personalItems[index].name
                    self.packingList.personalItems.remove(at: index)
                    self.showToast(message: "ƒê√£ x√≥a v·∫≠t d·ª•ng \(itemName)")
                    print("‚úÖ ƒê√£ x√≥a v·∫≠t d·ª•ng \(itemId) kh·ªèi danh s√°ch c√° nh√¢n")
                }

                self.saveToCache(packingList: self.packingList)
                completion?()
            }
            .store(in: &cancellables)
    }

    func fetchParticipants(completion: (() -> Void)? = nil) {
        participantViewModel.fetchParticipants(tripId: tripId) {
            print("‚úÖ ƒê√£ l√†m m·ªõi danh s√°ch participants t·ª´ API")
            self.fetchPackingList {
                print("‚úÖ ƒê√£ l√†m m·ªõi danh s√°ch v·∫≠t d·ª•ng sau khi c·∫≠p nh·∫≠t participants")
                completion?()
            }
        }
    }

    func currentItems(for tab: PackingListView.TabType) -> [PackingItem] {
        switch tab {
        case .shared:
            return packingList.sharedItems
        case .personal:
            return packingList.personalItems
        }
    }

    func binding(for item: PackingItem, in tab: PackingListView.TabType) -> Binding<Bool> {
        switch tab {
        case .shared:
            guard let index = packingList.sharedItems.firstIndex(where: { $0.id == item.id }) else {
                print("‚ùå Kh√¥ng t√¨m th·∫•y item \(item.id) trong danh s√°ch chung")
                return .constant(false)
            }
            return Binding(
                get: { self.packingList.sharedItems[index].isPacked },
                set: { newValue in
                    if self.packingList.sharedItems[index].isPacked != newValue {
                        print("üîÑ Updating local isPacked for shared item \(item.id): \(self.packingList.sharedItems[index].name) to \(newValue)")
                        self.packingList.sharedItems[index].isPacked = newValue
                        self.updatePackingItem(
                            itemId: item.id,
                            name: self.packingList.sharedItems[index].name,
                            quantity: self.packingList.sharedItems[index].quantity,
                            isShared: self.packingList.sharedItems[index].isShared,
                            isPacked: newValue,
                            userId: self.packingList.sharedItems[index].userId
                        ) {
                            print("‚úÖ ƒê√£ c·∫≠p nh·∫≠t isPacked cho shared item \(item.id) qua API")
                        } onError: { error in
                            print("‚ùå L·ªói khi c·∫≠p nh·∫≠t isPacked cho shared item \(item.id): \(error.localizedDescription)")
                        }
                        self.saveToCache(packingList: self.packingList)
                    }
                }
            )
        case .personal:
            guard let index = packingList.personalItems.firstIndex(where: { $0.id == item.id }) else {
                print("‚ùå Kh√¥ng t√¨m th·∫•y item \(item.id) trong danh s√°ch c√° nh√¢n")
                return .constant(false)
            }
            return Binding(
                get: { self.packingList.personalItems[index].isPacked },
                set: { newValue in
                    if self.packingList.personalItems[index].isPacked != newValue {
                        print("üîÑ Updating local isPacked for personal item \(item.id): \(self.packingList.personalItems[index].name) to \(newValue)")
                        self.packingList.personalItems[index].isPacked = newValue
                        self.updatePackingItem(
                            itemId: item.id,
                            name: self.packingList.personalItems[index].name,
                            quantity: self.packingList.personalItems[index].quantity,
                            isShared: self.packingList.personalItems[index].isShared,
                            isPacked: newValue,
                            userId: self.packingList.personalItems[index].userId
                        ) {
                            print("‚úÖ ƒê√£ c·∫≠p nh·∫≠t isPacked cho personal item \(item.id) qua API")
                        } onError: { error in
                            print("‚ùå L·ªói khi c·∫≠p nh·∫≠t isPacked cho personal item \(item.id): \(error.localizedDescription)")
                        }
                        self.saveToCache(packingList: self.packingList)
                    }
                }
            )
        }
    }

    func ownerInitials(for item: PackingItem) -> String {
        guard let userId = item.userId else {
            print("‚ö†Ô∏è No userId assigned for item \(item.name) (ID: \(item.id))")
            return ""
        }
        guard let participant = participants.first(where: { $0.user.id == userId }) else {
            print("‚ö†Ô∏è No participant found for userId=\(userId) in item \(item.name) (ID: \(item.id))")
            // C·∫≠p nh·∫≠t userId v·ªÅ nil n·∫øu participant kh√¥ng t·ªìn t·∫°i
            if let index = packingList.sharedItems.firstIndex(where: { $0.id == item.id }) {
                packingList.sharedItems[index].userId = nil
                updatePackingItem(
                    itemId: item.id,
                    name: item.name,
                    quantity: item.quantity,
                    isShared: item.isShared,
                    isPacked: item.isPacked,
                    userId: nil
                ) {
                    print("‚úÖ ƒê√£ c·∫≠p nh·∫≠t userId=nil cho shared item \(item.id) do participant kh√¥ng t·ªìn t·∫°i")
                    self.saveToCache(packingList: self.packingList)
                } onError: { error in
                    print("‚ùå L·ªói khi c·∫≠p nh·∫≠t userId=nil cho shared item \(item.id): \(error.localizedDescription)")
                }
            } else if let index = packingList.personalItems.firstIndex(where: { $0.id == item.id }) {
                packingList.personalItems[index].userId = nil
                updatePackingItem(
                    itemId: item.id,
                    name: item.name,
                    quantity: item.quantity,
                    isShared: item.isShared,
                    isPacked: item.isPacked,
                    userId: nil
                ) {
                    print("‚úÖ ƒê√£ c·∫≠p nh·∫≠t userId=nil cho personal item \(item.id) do participant kh√¥ng t·ªìn t·∫°i")
                    self.saveToCache(packingList: self.packingList)
                } onError: { error in
                    print("‚ùå L·ªói khi c·∫≠p nh·∫≠t userId=nil cho personal item \(item.id): \(error.localizedDescription)")
                }
            }
            // X√≥a cache v√† l√†m m·ªõi t·ª´ API
            UserDefaults.standard.removeObject(forKey: "packing_list_cache_\(tripId)")
            print("üóëÔ∏è ƒê√£ x√≥a cache packing list cho tripId=\(tripId)")
            fetchPackingList {
                print("‚úÖ ƒê√£ l√†m m·ªõi packing list t·ª´ API sau khi ph√°t hi·ªán userId kh√¥ng h·ª£p l·ªá")
            }
            return ""
        }
        let firstInitial = participant.user.firstName?.prefix(1) ?? ""
        let lastInitial = participant.user.lastName?.prefix(1) ?? ""
        let initials = "\(firstInitial)\(lastInitial)"
        print("‚úÖ Generated initials \(initials) for userId=\(userId) in item \(item.name)")
        return initials
    }

    func assignItem(itemId: Int, to userId: Int?) {
        guard let index = packingList.sharedItems.firstIndex(where: { $0.id == itemId }) else {
            print("‚ùå Item \(itemId) not found in shared items")
            showToast(message: "Kh√¥ng t√¨m th·∫•y v·∫≠t d·ª•ng")
            return
        }
        let oldUserId = packingList.sharedItems[index].userId
        if oldUserId == userId {
            print("‚ö†Ô∏è No change in userId for item \(itemId): \(packingList.sharedItems[index].name), already set to \(String(describing: userId))")
            return
        }
        print("üîÑ Assigning shared item \(itemId): \(packingList.sharedItems[index].name) from userId=\(String(describing: oldUserId)) to userId=\(String(describing: userId))")
        packingList.sharedItems[index].userId = userId
        updatePackingItem(
            itemId: itemId,
            name: packingList.sharedItems[index].name,
            quantity: packingList.sharedItems[index].quantity,
            isShared: packingList.sharedItems[index].isShared,
            isPacked: packingList.sharedItems[index].isPacked,
            userId: userId
        ) {
            print("‚úÖ Completed assignItem for shared item \(itemId): userId=\(String(describing: userId))")
        } onError: { error in
            print("‚ùå L·ªói khi g√°n item \(itemId): \(error.localizedDescription)")
        }
        saveToCache(packingList: packingList)
    }

    private func handleCompletion(_ completion: Subscribers.Completion<Error>, completionHandler: (() -> Void)? = nil) {
        switch completion {
        case .failure(let error):
            print("‚ùå Error performing request: \(error.localizedDescription)")
            if let decodingError = error as? DecodingError {
                switch decodingError {
                case .dataCorrupted(let context):
                    print("üîç Data corrupted: \(context.debugDescription)")
                case .keyNotFound(let key, let context):
                    print("üîç Key '\(key)' not found: \(context.debugDescription)")
                case .typeMismatch(let type, let context):
                    print("üîç Type '\(type)' mismatch: \(context.debugDescription)")
                case .valueNotFound(let type, let context):
                    print("üîç Value '\(type)' not found: \(context.debugDescription)")
                @unknown default:
                    print("üîç Unknown decoding error")
                }
            }
            showToast(message: "L·ªói khi th·ª±c hi·ªán h√†nh ƒë·ªông")
        case .finished:
            print("‚úÖ Request completed")
        }
        completionHandler?()
    }

    private func saveToCache(packingList: PackingList) {
        do {
            let data = try JSONEncoder().encode(packingList)
            UserDefaults.standard.set(data, forKey: "packing_list_cache_\(tripId)")
            print("‚úÖ Saved packing list to cache for tripId=\(tripId)")
        } catch {
            print("‚ùå Error saving packing list cache: \(error.localizedDescription)")
            showToast(message: "L·ªói khi l∆∞u cache")
        }
    }

    private func loadFromCache() -> PackingList? {
        guard let data = UserDefaults.standard.data(forKey: "packing_list_cache_\(tripId)") else {
            print("‚ö†Ô∏è No packing list cache found for tripId=\(tripId)")
            return nil
        }
        do {
            let packingList = try JSONDecoder().decode(PackingList.self, from: data)
            print("‚úÖ Loaded packing list from cache for tripId=\(tripId)")
            return packingList
        } catch {
            print("‚ùå Error reading packing list cache: \(error.localizedDescription)")
            UserDefaults.standard.removeObject(forKey: "packing_list_cache_\(tripId)")
            return nil
        }
    }

    private func showToast(message: String) {
        print("üì¢ Setting toast: \(message)")
        if showToast {
            print("‚ö†Ô∏è Toast already visible, queuing: \(message)")
            return
        }
        toastMessage = message
        showToast = true
        DispatchQueue.main.asyncAfter(deadline: .now() + 2) {
            print("üì¢ Hiding toast")
            self.showToast = false
            self.toastMessage = nil
        }
    }

    func initials(for user: User) -> String {
        let first = user.firstName?.prefix(1) ?? ""
        let last = user.lastName?.prefix(1) ?? ""
        return "\(first)\(last)"
    }
}
