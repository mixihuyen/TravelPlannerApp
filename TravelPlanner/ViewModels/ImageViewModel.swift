import Foundation
import SDWebImage
import CoreData
import Combine
import Network

class ImageViewModel: ObservableObject {
    @Published var images: [ImageData] = []
    @Published var publicImages: [ImageData] = []
    @Published var userImages: [ImageData] = []
    @Published var isLoading: Bool = false
    @Published var toastMessage: String? = nil
    @Published var showToast: Bool = false
    @Published var toastType: ToastType?
    
    private var cancellables = Set<AnyCancellable>()
    private var allPublicImages: [ImageData] = []
    private var allUserImages: [ImageData] = []
    private var hasMoreData: Bool = true
    private var lastLoadedImageId: Int? // H·ªó tr·ª£ ph√¢n trang
    private let ttl: TimeInterval = 300 // 5 ph√∫t
    private var cacheTimestamp: Date?
    private let coreDataStack = CoreDataStack.shared
    private let networkManager = NetworkManager.shared
    private var isInitialFetchDone: Bool = false
    
    init() {
        print("üöÄ ImageViewModel initialized")
        
        // Load d·ªØ li·ªáu t·ª´ cache tr∆∞·ªõc
        if let cachedPublicImages = loadFromCache() {
            self.allPublicImages = cachedPublicImages
            self.publicImages = cachedPublicImages
            self.cacheTimestamp = CacheManager.shared.loadCacheTimestamp(forKey: "images_cache_timestamp")
            print("üìÇ S·ª≠ d·ª•ng \(cachedPublicImages.count) public images t·ª´ cache")
        }
        
        if let cachedUserImages = loadUserImagesFromCache() {
            self.allUserImages = cachedUserImages
            self.userImages = cachedUserImages
            self.cacheTimestamp = CacheManager.shared.loadCacheTimestamp(forKey: "user_images_cache_timestamp")
            print("üìÇ S·ª≠ d·ª•ng \(cachedUserImages.count) user images t·ª´ cache")
        }
        if publicImages.isEmpty || userImages.isEmpty {
                    isLoading = true
                   
                }
        
        // Theo d√µi tr·∫°ng th√°i m·∫°ng
        networkManager.$isNetworkAvailable
            .debounce(for: .seconds(0.5), scheduler: DispatchQueue.main) // Tr√°nh nhi·ªÅu th√¥ng b√°o m·∫°ng li√™n ti·∫øp
            .sink { [weak self] isAvailable in
                guard let self else { return }
                print("üåê Network status in ImageViewModel: \(isAvailable ? "Connected" : "Disconnected")")
                
                if isAvailable {
                                // Ch·ªâ fetch n·∫øu cache r·ªóng ho·∫∑c h·∫øt h·∫°n
                                let cacheExpired = self.cacheTimestamp == nil || Date().timeIntervalSince(self.cacheTimestamp!) > self.ttl
                                if !self.isInitialFetchDone && cacheExpired {
                                    print("üåê M·∫°ng kh·∫£ d·ª•ng, cache h·∫øt h·∫°n ho·∫∑c r·ªóng, ki·ªÉm tra d·ªØ li·ªáu")
                                    if self.publicImages.isEmpty {
                                        print("üöÄ G·ªçi fetchPublicImages v√¨ publicImages r·ªóng")
                                        self.fetchPublicImages(limit: 2, force: false)
                                    }
                                    if self.userImages.isEmpty {
                                        print("üöÄ G·ªçi fetchImagesOfUsers v√¨ userImages r·ªóng")
                                        self.fetchImagesOfUsers()
                                    }
                                    self.isInitialFetchDone = true
                                } else {
                                    print("üìÇ Cache c√≤n hi·ªáu l·ª±c ho·∫∑c fetch ban ƒë·∫ßu ƒë√£ ho√†n t·∫•t, b·ªè qua fetch")
                                    self.isLoading = false
                                }
                            } else {
                                print("‚ùå M·∫°ng kh√¥ng kh·∫£ d·ª•ng, s·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ cache")
                                self.showToast(message: "Kh√¥ng c√≥ k·∫øt n·ªëi m·∫°ng", type: .error)
                                if self.publicImages.isEmpty && self.userImages.isEmpty {
                                    self.isLoading = false
                                    self.showToast(message: "M·∫°ng kh√¥ng kh·∫£ d·ª•ng v√† kh√¥ng c√≥ d·ªØ li·ªáu cache", type: .error)
                                }
                            }
                        }
                        .store(in: &cancellables)
    }
    
    func fetchImagesOfUsers() {
        // Ki·ªÉm tra cache tr∆∞·ªõc
        if let ts = cacheTimestamp, Date().timeIntervalSince(ts) < ttl, !allUserImages.isEmpty {
            print("üìÇ Cache c√≤n hi·ªáu l·ª±c, s·ª≠ d·ª•ng \(allUserImages.count) user images")
            userImages = allUserImages
            isLoading = false
            return
        }
        
        guard networkManager.isNetworkAvailable else {
            print("‚ùå Kh√¥ng c√≥ k·∫øt n·ªëi m·∫°ng, s·ª≠ d·ª•ng danh s√°ch ·∫£nh t·ª´ cache")
            showToast(message: "Kh√¥ng c√≥ k·∫øt n·ªëi m·∫°ng", type: .error)
            if let cachedUserImages = loadUserImagesFromCache() {
                self.allUserImages = cachedUserImages
                self.userImages = cachedUserImages
            }
            isLoading = false
            return
        }
        
        guard let url = URL(string: "\(APIConfig.baseURL)/images/myImages"),
              let token = UserDefaults.standard.string(forKey: "authToken") else {
            let errorMessage = "Kh√¥ng t√¨m th·∫•y token x√°c th·ª±c ho·∫∑c URL kh√¥ng h·ª£p l·ªá"
            print("‚ùå \(errorMessage)")
            showToast(message: errorMessage, type: .error)
            isLoading = false
            return
        }
        
        let request = NetworkManager.createRequest(url: url, method: "GET", token: token)
        print("üì§ G·ª≠i y√™u c·∫ßu l·∫•y ·∫£nh ƒë·∫øn: \(url.absoluteString)")
        
        isLoading = true
        networkManager.performRequest(request, decodeTo: ImageListResponse.self)
            .sink { [weak self] completionResult in
                guard let self else { return }
                switch completionResult {
                case .failure(let error):
                    let errorMessage = error.localizedDescription.contains("Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n") ?
                        "Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!" :
                        "L·ªói khi l·∫•y danh s√°ch ·∫£nh: \(error.localizedDescription)"
                    print("‚ùå \(errorMessage)")
                    self.showToast(message: errorMessage, type: .error)
                    if let cachedUserImages = self.loadUserImagesFromCache() {
                        self.allUserImages = cachedUserImages
                        self.userImages = cachedUserImages
                    }
                    self.isLoading = false
                    if errorMessage.contains("Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n") {
                        NotificationCenter.default.post(name: NSNotification.Name("UserNeedsToLogin"), object: nil)
                    }
                case .finished:
                    print("‚úÖ L·∫•y danh s√°ch ·∫£nh th√†nh c√¥ng")
                }
            } receiveValue: { [weak self] response in
                guard let self else { return }
                print("üì• API response data count: \(response.data.count)")
                let validImages = response.data.filter { image in
                    guard let url = URL(string: image.url), url.scheme != nil else {
                        print("‚ö†Ô∏è B·ªè qua ·∫£nh v·ªõi URL kh√¥ng h·ª£p l·ªá: \(image.url), imageId: \(image.id)")
                        return false
                    }
                    return true
                }
                print("üì• Valid images after filter: \(validImages.count)")
                
                Publishers.MergeMany(validImages.map { image in
                    URLSession.shared.dataTaskPublisher(for: URL(string: image.url)!)
                        .map { data, _ in
                            var updatedImage = image
                            updatedImage.imageData = data
                            return updatedImage
                        }
                        .catch { error in
                            print("‚ùå L·ªói t·∫£i ·∫£nh \(image.url): \(error.localizedDescription)")
                            return Just(image)
                        }
                })
                .collect()
                .receive(on: DispatchQueue.main)
                .sink { [weak self] updatedImages in
                    guard let self else { return }
                    print("üì• Updated user images with data: \(updatedImages.count)")
                    
                    // Debug: In danh s√°ch ID
                    print("üìú IDs in updatedImages: \(updatedImages.map { $0.id })")
                    print("üìú IDs in allUserImages before update: \(allUserImages.map { $0.id })")
                    
                    let newImages = updatedImages
                    print("üì• New user images: \(newImages.count)")
                    
                    self.allUserImages = newImages
                    self.userImages = newImages
                    self.hasMoreData = false
                    self.cacheTimestamp = Date()
                    print("üì∏ ƒê√£ nh·∫≠n \(response.data.count) ·∫£nh, h·ª£p l·ªá: \(updatedImages.count), hi·ªÉn th·ªã: \(self.userImages.count)")
                    
                    if self.userImages.isEmpty {
                        self.showToast(message: "Kh√¥ng c√≥ ·∫£nh n√†o ƒë·ªÉ hi·ªÉn th·ªã", type: .error)
                    }
                    
                    self.saveUserImagesToCache(images: newImages)
                    self.isLoading = false
                    print("üöÄ ƒê·∫∑t isLoading = false, userImages.count=\(self.userImages.count)")
                }
                .store(in: &self.cancellables)
            }
            .store(in: &cancellables)
    }
    
    private func saveUserImagesToCache(images: [ImageData]) {
        let context = coreDataStack.context
        context.perform {
            images.forEach { imageData in
                let request: NSFetchRequest<UserImageEntity> = UserImageEntity.fetchRequest()
                request.predicate = NSPredicate(format: "id == %d", imageData.id)
                if let existingEntity = try? context.fetch(request).first {
                    context.delete(existingEntity)
                    print("üóëÔ∏è Removed existing user image ID=\(imageData.id) before saving")
                }
                let entity = imageData.toUserImageEntity(context: context)
                context.insert(entity)
                print("üíæ Saved user image to CoreData: ID=\(imageData.id), URL=\(imageData.url)")
            }
            do {
                try context.save()
                CacheManager.shared.saveCacheTimestamp(forKey: "user_images_cache_timestamp")
                self.cacheTimestamp = Date()
                print("üíæ Saved \(images.count) user images to CoreData")
            } catch {
                print("‚ùå Error saving user images to CoreData: \(error)")
                self.showToast(message: "L·ªói khi l∆∞u d·ªØ li·ªáu cache", type: .error)
            }
        }
    }
    
    private func loadUserImagesFromCache() -> [ImageData]? {
        let context = coreDataStack.context
        let request: NSFetchRequest<UserImageEntity> = UserImageEntity.fetchRequest()
        request.sortDescriptors = [NSSortDescriptor(key: "createdAt", ascending: false)]
        
        do {
            let entities = try context.fetch(request)
            let images = entities.map { ImageData(from: $0) }
            print("üìÇ Loaded \(images.count) user images from cache")
            
            let limit = 2
            hasMoreData = images.count >= limit
            return images.isEmpty ? nil : images
        } catch {
            print("‚ùå Error loading user images from cache: \(error)")
            self.showToast(message: "L·ªói khi t·∫£i d·ªØ li·ªáu cache", type: .error)
            return nil
        }
    }
    
    func fetchPublicImages(limit: Int? = 2, force: Bool = false) {
        if !force, let ts = cacheTimestamp, Date().timeIntervalSince(ts) < ttl, !allPublicImages.isEmpty {
            print("üìÇ Cache c√≤n hi·ªáu l·ª±c, s·ª≠ d·ª•ng \(allPublicImages.count) public images")
            publicImages = allPublicImages
            isLoading = false
            return
        }
        
        guard networkManager.isNetworkAvailable else {
            print("‚ùå Kh√¥ng c√≥ k·∫øt n·ªëi m·∫°ng, s·ª≠ d·ª•ng danh s√°ch ·∫£nh t·ª´ cache")
            showToast(message: "Kh√¥ng c√≥ k·∫øt n·ªëi m·∫°ng", type: .error)
            if let cachedImages = loadFromCache() {
                self.allPublicImages = cachedImages
                self.publicImages = cachedImages
                hasMoreData = false
            } else {
                showToast(message: "Kh√¥ng c√≥ d·ªØ li·ªáu cache", type: .error)
            }
            isLoading = false
            return
        }
        
        let page = force ? 1 : ((allPublicImages.count / (limit ?? 2)) + 1)
        var urlString = "\(APIConfig.baseURL)/images/publicImages"
        var queryItems = [
            URLQueryItem(name: "sort", value: "createdAt:desc"),
            URLQueryItem(name: "page", value: "\(page)"),
            URLQueryItem(name: "limit", value: "\(limit ?? 2)")
        ]
        
        guard var urlComponents = URLComponents(string: urlString),
              let token = UserDefaults.standard.string(forKey: "authToken") else {
            let errorMessage = "URL ho·∫∑c token kh√¥ng h·ª£p l·ªá"
            print("‚ùå \(errorMessage)")
            showToast(message: errorMessage, type: .error)
            isLoading = false
            return
        }
        
        urlComponents.queryItems = queryItems
        guard let url = urlComponents.url else {
            let errorMessage = "URL kh√¥ng h·ª£p l·ªá"
            print("‚ùå \(errorMessage)")
            showToast(message: errorMessage, type: .error)
            isLoading = false
            return
        }
        
        let request = NetworkManager.createRequest(url: url, method: "GET", token: token)
        print("üì§ G·ª≠i y√™u c·∫ßu l·∫•y ·∫£nh c√¥ng khai ƒë·∫øn: \(url.absoluteString)")
        
        isLoading = true
        networkManager.performRequest(request, decodeTo: ImageListResponse.self)
            .sink { [weak self] completionResult in
                guard let self else { return }
                switch completionResult {
                case .failure(let error):
                    let errorMessage = error.localizedDescription.contains("Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n") ?
                        "Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!" :
                        "L·ªói khi l·∫•y danh s√°ch ·∫£nh c√¥ng khai: \(error.localizedDescription)"
                    print("‚ùå \(errorMessage)")
                    self.showToast(message: errorMessage, type: .error)
                    if let cachedImages = self.loadFromCache() {
                        self.allPublicImages = cachedImages
                        self.publicImages = cachedImages
                    } else {
                        self.showToast(message: "Kh√¥ng c√≥ d·ªØ li·ªáu cache", type: .error)
                    }
                    self.isLoading = false // ƒê·∫∑t ·ªü ƒë√¢y cho tr∆∞·ªùng h·ª£p l·ªói
                    self.hasMoreData = true
                    if errorMessage.contains("Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n") {
                        NotificationCenter.default.post(name: NSNotification.Name("UserNeedsToLogin"), object: nil)
                    }
                case .finished:
                    print("‚úÖ L·∫•y danh s√°ch ·∫£nh c√¥ng khai th√†nh c√¥ng")
                }
            } receiveValue: { [weak self] response in
                guard let self else { return }
                print("üì• API response data count: \(response.data.count)")
                let validImages = response.data.filter { image in
                    guard let url = URL(string: image.url), url.scheme != nil else {
                        print("‚ö†Ô∏è B·ªè qua ·∫£nh v·ªõi URL kh√¥ng h·ª£p l·ªá: \(image.url), imageId: \(image.id)")
                        return false
                    }
                    return true
                }
                print("üì• Valid images after filter: \(validImages.count)")
                
                Publishers.MergeMany(validImages.map { image in
                    URLSession.shared.dataTaskPublisher(for: URL(string: image.url)!)
                        .map { data, _ in
                            var updatedImage = image
                            updatedImage.imageData = data
                            return updatedImage
                        }
                        .catch { error in
                            print("‚ùå L·ªói t·∫£i ·∫£nh \(image.url): \(error.localizedDescription)")
                            return Just(image)
                        }
                })
                .collect()
                .receive(on: DispatchQueue.main)
                .sink { [weak self] updatedImages in
                    guard let self else { return }
                    print("üì• Updated images with data: \(updatedImages.count)")
                    
                    let newImages = updatedImages.filter { newImage in
                        !self.allPublicImages.contains { existingImage in
                            newImage.id == existingImage.id
                        }
                    }
                    print("üì• New images after dedup: \(newImages.count)")
                    
                    if force {
                        self.allPublicImages = newImages
                        self.publicImages = newImages
                        self.showToast(message: "ƒê√£ l√†m m·ªõi", type: .success)
                    } else {
                        self.allPublicImages.append(contentsOf: newImages)
                        self.publicImages = self.allPublicImages
                        print("üì∏ Load more: th√™m \(newImages.count) ·∫£nh")
                    }
                    
                    let currentPage = response.currentPage ?? 1
                    let totalPages = response.totalPages ?? 1
                    self.hasMoreData = currentPage < totalPages
                    self.lastLoadedImageId = newImages.last?.id
                    self.cacheTimestamp = Date()
                    print("üì∏ Ph√¢n trang: currentPage=\(currentPage), totalPages=\(totalPages), hasMoreData=\(self.hasMoreData)")
                    
                    self.saveToCache(images: updatedImages)
                    self.isLoading = false // ƒê·∫∑t isLoading = false SAU KHI c·∫≠p nh·∫≠t publicImages
                }
                .store(in: &self.cancellables)
            }
            .store(in: &cancellables)
    }
    
    func loadMoreImages(isPublic: Bool) {
        guard !isLoading, hasMoreData else {
            print("‚ö†Ô∏è ƒêang t·∫£i ho·∫∑c kh√¥ng c√≤n ·∫£nh, b·ªè qua y√™u c·∫ßu, isLoading: \(isLoading), hasMoreData: \(hasMoreData)")
            return
        }
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) { [weak self] in
            guard let self, !self.isLoading, self.hasMoreData else {
                print("‚ö†Ô∏è B·ªè qua load more: isLoading=\(self?.isLoading ?? true), hasMoreData=\(self?.hasMoreData ?? false)")
                return
            }
            isLoading = true
            if isPublic {
                print("üöÄ G·ªçi fetchPublicImages ƒë·ªÉ load more")
                self.fetchPublicImages(limit: 2, force: false)
            } else {
                print("‚ö†Ô∏è fetchImagesOfUsers kh√¥ng h·ªó tr·ª£ ph√¢n trang, b·ªè qua")
            }
            print("üì∏ T·ªïng s·ªë ·∫£nh hi·ªán t·∫°i: \(isPublic ? self.publicImages.count : self.userImages.count)")
        }
    }
    
    func refreshImages(isPublic: Bool) {
        print("üöÄ Refresh triggered")
        isLoading = true
        
        guard networkManager.isNetworkAvailable else {
            print("‚ùå Kh√¥ng c√≥ k·∫øt n·ªëi m·∫°ng, gi·ªØ d·ªØ li·ªáu cache")
            showToast(message: "Kh√¥ng th·ªÉ l√†m m·ªõi do m·∫•t k·∫øt n·ªëi m·∫°ng", type: .error)
            if isPublic {
                if let cachedImages = loadFromCache() {
                    self.allPublicImages = cachedImages
                    self.publicImages = cachedImages
                }
            } else {
                if let cachedImages = loadUserImagesFromCache() {
                    self.allUserImages = cachedImages
                    self.userImages = cachedImages
                }
            }
            hasMoreData = false
            return
        }
        if isPublic {
            allPublicImages.removeAll()
            publicImages.removeAll()
            clearCoreDataCache()
            fetchPublicImages(limit: 2, force: true)
        } else {
            allUserImages.removeAll()
            userImages.removeAll()
            clearUserImagesCache()
            fetchImagesOfUsers()
        }
        hasMoreData = true
        lastLoadedImageId = nil
        cacheTimestamp = nil
    }
    
    
    func uploadImage(_ imageData: Data, completion: @escaping (Result<ImageData, Error>) -> Void) {
        guard let url = URL(string: "\(APIConfig.baseURL)/images/upload"),
              let token = UserDefaults.standard.string(forKey: "authToken") else {
            let errorMessage = "Kh√¥ng t√¨m th·∫•y token x√°c th·ª±c ho·∫∑c URL kh√¥ng h·ª£p l·ªá"
            print("‚ùå \(errorMessage)")
            showToast(message: errorMessage, type: .error)
            completion(.failure(NSError(domain: "", code: -1, userInfo: [NSLocalizedDescriptionKey: errorMessage])))
            return
        }
        
        var request = NetworkManager.createRequest(url: url, method: "POST", token: token)
        
        // X√°c ƒë·ªãnh ƒë·ªãnh d·∫°ng ·∫£nh
        let imageFormat = detectImageFormat(from: imageData)
        let boundary = "Boundary-\(UUID().uuidString)"
        request.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
        
        // T·∫°o body cho multipart/form-data
        var body = Data()
        body.append("--\(boundary)\r\n".data(using: .utf8)!)
        body.append("Content-Disposition: form-data; name=\"image\"; filename=\"image.\(imageFormat.fileExtension)\"\r\n".data(using: .utf8)!)
        body.append("Content-Type: \(imageFormat.contentType)\r\n\r\n".data(using: .utf8)!)
        body.append(imageData)
        body.append("\r\n".data(using: .utf8)!)
        body.append("--\(boundary)--\r\n".data(using: .utf8)!)
        
        request.httpBody = body
        
        // Log chi ti·∫øt y√™u c·∫ßu
        print("üì§ G·ª≠i y√™u c·∫ßu ƒë·∫øn: \(url.absoluteString)")
        print("üì§ Headers: \(request.allHTTPHeaderFields ?? [:])")
        print("üì§ Body size: \(body.count) bytes")
        
        isLoading = true
        networkManager.performRequest(request, decodeTo: ImageUploadResponse.self)
            .sink { [weak self] completionResult in
                guard let self else { return }
                self.isLoading = false
                switch completionResult {
                case .failure(let error):
                    let errorMessage = (error as? URLError)?.code == .badServerResponse ?
                    "Server g·∫∑p s·ª± c·ªë, vui l√≤ng th·ª≠ l·∫°i sau" :
                    "L·ªói khi t·∫£i ·∫£nh: \(error.localizedDescription)"
                    print("‚ùå \(errorMessage) (Code: \((error as? URLError)?.code.rawValue ?? -1))")
                    self.showToast(message: errorMessage, type: .error)
                    completion(.failure(error))
                case .finished:
                    print("‚úÖ T·∫£i ·∫£nh th√†nh c√¥ng")
                }
            } receiveValue: { [weak self] response in
                guard let self else { return }
                self.images.append(response.data) // Th√™m ·∫£nh m·ªõi v√†o danh s√°ch
                print("üì∏ T·∫£i ·∫£nh th√†nh c√¥ng, URL: \(response.data.url), ID: \(response.data.id)")
                self.showToast(message: "T·∫£i ·∫£nh th√†nh c√¥ng!", type: .success)
                completion(.success(response.data))
            }
            .store(in: &cancellables)
    }
    
//    func uploadImagePublisher(_ imageData: Data) -> AnyPublisher<ImageData, Error> {
//            Future<ImageData, Error> { promise in
//                self.uploadImage(imageData) { result in
//                    switch result {
//                    case .success(let imageData):
//                        promise(.success(imageData))
//                    case .failure(let error):
//                        promise(.failure(error))
//                    }
//                }
//            }
//            .eraseToAnyPublisher()
//        }
    
    func deleteImage(imageId: Int, completion: @escaping (Result<Void, Error>) -> Void) {
        guard let url = URL(string: "\(APIConfig.baseURL)/images/delete/\(imageId)"),
              let token = UserDefaults.standard.string(forKey: "authToken") else {
            let errorMessage = "Kh√¥ng t√¨m th·∫•y token x√°c th·ª±c ho·∫∑c URL kh√¥ng h·ª£p l·ªá"
            print("‚ùå \(errorMessage)")
            showToast(message: errorMessage, type: .error)
            completion(.failure(NSError(domain: "", code: -1, userInfo: [NSLocalizedDescriptionKey: errorMessage])))
            return
        }
        
        let request = NetworkManager.createRequest(url: url, method: "DELETE", token: token)
        print("üì§ G·ª≠i y√™u c·∫ßu x√≥a ·∫£nh ƒë·∫øn: \(url.absoluteString), method: DELETE")
        isLoading = true
        networkManager.performRequest(request, decodeTo: ImageDeleteResponse.self)
            .sink { [weak self] completionResult in
                guard let self else { return }
                self.isLoading = false
                switch completionResult {
                case .failure(let error):
                    if let urlError = error as? URLError,
                       let httpStatusCode = urlError.userInfo["HTTPStatusCode"] as? Int,
                       httpStatusCode == 404 {
                        print("‚ö†Ô∏è ·∫¢nh ID: \(imageId) kh√¥ng t·ªìn t·∫°i tr√™n server, coi nh∆∞ x√≥a th√†nh c√¥ng")
                        self.showToast(message: "·∫¢nh kh√¥ng t·ªìn t·∫°i, ti·∫øp t·ª•c qu√° tr√¨nh", type: .error)
                        completion(.success(())) // Coi nh∆∞ x√≥a th√†nh c√¥ng
                    } else {
                        print("‚ùå L·ªói khi x√≥a ·∫£nh ID: \(imageId), l·ªói: \(error.localizedDescription)")
                        self.showToast(message: "L·ªói khi x√≥a ·∫£nh: \(error.localizedDescription)", type: .error)
                        completion(.failure(error))
                    }
                case .finished:
                    print("‚úÖ X√≥a ·∫£nh ID: \(imageId) th√†nh c√¥ng")
                    self.showToast(message: "X√≥a ·∫£nh th√†nh c√¥ng!", type: .success)
                    completion(.success(()))
                }
            } receiveValue: { response in
                print("üì• Response x√≥a ·∫£nh: success=\(response.success), message=\(response.message), data=\(response.data)")
            }
            .store(in: &cancellables)
    }
    private func saveToCache(images: [ImageData]) {
        let context = coreDataStack.context
        context.perform {
            images.forEach { imageData in
                let request: NSFetchRequest<ImageEntity> = ImageEntity.fetchRequest()
                request.predicate = NSPredicate(format: "id == %d", imageData.id)
                if let existingEntity = try? context.fetch(request).first {
                    context.delete(existingEntity)
                    print("üóëÔ∏è Removed existing image ID=\(imageData.id) before saving")
                }
                let entity = imageData.toEntity(context: context)
                context.insert(entity)
                print("üíæ Saved image to CoreData: ID=\(imageData.id), URL=\(imageData.url)")
            }
            do {
                try context.save()
                CacheManager.shared.saveCacheTimestamp(forKey: "images_cache_timestamp")
                self.cacheTimestamp = Date()
                print("üíæ Saved \(images.count) images to CoreData")
            } catch {
                print("‚ùå Error saving to CoreData: \(error)")
                self.showToast(message: "L·ªói khi l∆∞u d·ªØ li·ªáu cache", type: .error)
            }
        }
    }
    
    private func loadFromCache() -> [ImageData]? {
        let context = coreDataStack.context
        let request: NSFetchRequest<ImageEntity> = ImageEntity.fetchRequest()
        request.sortDescriptors = [NSSortDescriptor(key: "createdAt", ascending: false)]
        
        do {
            let entities = try context.fetch(request)
            let images = entities.map { ImageData(from: $0) }
            print("üìÇ Loaded \(images.count) public images from cache")
            
            let limit = 2
            hasMoreData = images.count >= limit
            return images.isEmpty ? nil : images
        } catch {
            print("‚ùå Error loading public images from cache: \(error)")
            self.showToast(message: "L·ªói khi t·∫£i d·ªØ li·ªáu cache", type: .error)
            return nil
        }
    }
    
    private func clearCoreDataCache() {
        let context = coreDataStack.context
        let fetchRequest: NSFetchRequest<NSFetchRequestResult> = ImageEntity.fetchRequest()
        let deleteRequest = NSBatchDeleteRequest(fetchRequest: fetchRequest)
        do {
            try context.execute(deleteRequest)
            coreDataStack.saveContext()
            print("üóëÔ∏è Cleared CoreData cache for ImageEntity")
        } catch {
            print("‚ùå Error clearing CoreData cache: \(error)")
            self.showToast(message: "L·ªói khi x√≥a cache", type: .error)
        }
    }
    
    private func clearUserImagesCache() {
        let context = coreDataStack.context
        let fetchRequest: NSFetchRequest<NSFetchRequestResult> = UserImageEntity.fetchRequest()
        let deleteRequest = NSBatchDeleteRequest(fetchRequest: fetchRequest)
        do {
            try context.execute(deleteRequest)
            coreDataStack.saveContext()
            print("üóëÔ∏è Cleared CoreData cache for UserImageEntity")
        } catch {
            print("‚ùå Error clearing UserImageEntity cache: \(error)")
            self.showToast(message: "L·ªói khi x√≥a cache", type: .error)
        }
    }
    
    func showToast(message: String, type: ToastType) {
        print("üì¢ ƒê·∫∑t toast: \(message) v·ªõi type: \(type)")
        DispatchQueue.main.async {
            self.toastMessage = message
            self.toastType = type
            self.showToast = true
            DispatchQueue.main.asyncAfter(deadline: .now() + 4) {
                print("üì¢ ·∫®n toast")
                self.showToast = false
                self.toastMessage = nil
                self.toastType = nil
            }
        }
    }
}
