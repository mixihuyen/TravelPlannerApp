import Foundation
import Combine

class ImageViewModel: ObservableObject {
    @Published var images: [ImageData] = []
    @Published var isLoading: Bool = false
    @Published var toastMessage: String? = nil
    @Published var showToast: Bool = false
    @Published var toastType: ToastType?
    
    private var cancellables = Set<AnyCancellable>()
    private let networkManager = NetworkManager()

    func fetchImagesOfUsers() {
        guard let url = URL(string: "\(APIConfig.baseURL)/images/myImages"),
              let token = UserDefaults.standard.string(forKey: "authToken") else {
            let errorMessage = "Kh√¥ng t√¨m th·∫•y token x√°c th·ª±c ho·∫∑c URL kh√¥ng h·ª£p l·ªá"
            print("‚ùå \(errorMessage)")
            showToast(message: errorMessage, type: .error)
            return
        }
        
        let request = NetworkManager.createRequest(url: url, method: "GET", token: token)
        print("üì§ G·ª≠i y√™u c·∫ßu l·∫•y ·∫£nh ƒë·∫øn: \(url.absoluteString)")
        
        isLoading = true
        networkManager.performRequest(request, decodeTo: ImageListResponse.self)
            .sink { [weak self] completionResult in
                guard let self else { return }
                self.isLoading = false
                switch completionResult {
                case .failure(let error):
                    let errorMessage = "L·ªói khi l·∫•y danh s√°ch ·∫£nh: \(error.localizedDescription)"
                    print("‚ùå \(errorMessage)")
                    self.showToast(message: errorMessage, type: .error)
                case .finished:
                    print("‚úÖ L·∫•y danh s√°ch ·∫£nh th√†nh c√¥ng")
                }
            } receiveValue: { [weak self] response in
                guard let self else { return }
                self.images = response.data
                print("üì∏ ƒê√£ nh·∫≠n \(response.data.count) ·∫£nh")
                if response.data.isEmpty {
                    self.showToast(message: "Kh√¥ng c√≥ ·∫£nh n√†o ƒë·ªÉ hi·ªÉn th·ªã", type: .error)
                }
            }
            .store(in: &cancellables)
    }
    func fetchPublicImages() {
        guard let url = URL(string: "\(APIConfig.baseURL)/images/publicImages"),
              let token = UserDefaults.standard.string(forKey: "authToken") else {
            let errorMessage = "Kh√¥ng t√¨m th·∫•y token x√°c th·ª±c ho·∫∑c URL kh√¥ng h·ª£p l·ªá"
            print("‚ùå \(errorMessage)")
            showToast(message: errorMessage, type: .error)
            return
        }
        
        let request = NetworkManager.createRequest(url: url, method: "GET", token: token)
        print("üì§ G·ª≠i y√™u c·∫ßu l·∫•y ·∫£nh c√¥ng khai ƒë·∫øn: \(url.absoluteString)")
        
        isLoading = true
        networkManager.performRequest(request, decodeTo: ImageListResponse.self)
            .sink { [weak self] completionResult in
                guard let self else { return }
                self.isLoading = false
                switch completionResult {
                case .failure(let error):
                    let errorMessage = "L·ªói khi l·∫•y danh s√°ch ·∫£nh c√¥ng khai: \(error.localizedDescription)"
                    print("‚ùå \(errorMessage)")
                    self.showToast(message: errorMessage, type: .error)
                case .finished:
                    print("‚úÖ L·∫•y danh s√°ch ·∫£nh c√¥ng khai th√†nh c√¥ng")
                }
            } receiveValue: { [weak self] response in
                guard let self else { return }
                self.images = response.data
                print("üì∏ ƒê√£ nh·∫≠n \(response.data.count) ·∫£nh c√¥ng khai")
                if response.data.isEmpty {
                    self.showToast(message: "Kh√¥ng c√≥ ·∫£nh c√¥ng khai n√†o ƒë·ªÉ hi·ªÉn th·ªã", type: .error)
                }
            }
            .store(in: &cancellables)
    }
    
    func uploadImage(_ imageData: Data, completion: @escaping (Result<ImageData, Error>) -> Void) {
        guard let url = URL(string: "\(APIConfig.baseURL)/images/upload"),
              let token = UserDefaults.standard.string(forKey: "authToken") else {
            let errorMessage = "Kh√¥ng t√¨m th·∫•y token x√°c th·ª±c ho·∫∑c URL kh√¥ng h·ª£p l·ªá"
            print("‚ùå \(errorMessage)")
            showToast(message: errorMessage, type: .error)
            completion(.failure(NSError(domain: "", code: -1, userInfo: [NSLocalizedDescriptionKey: errorMessage])))
            return
        }
        
        var request = NetworkManager.createRequest(url: url, method: "POST", token: token)
        
        // X√°c ƒë·ªãnh ƒë·ªãnh d·∫°ng ·∫£nh
        let imageFormat = detectImageFormat(from: imageData)
        let boundary = "Boundary-\(UUID().uuidString)"
        request.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
        
        // T·∫°o body cho multipart/form-data
        var body = Data()
        body.append("--\(boundary)\r\n".data(using: .utf8)!)
        body.append("Content-Disposition: form-data; name=\"image\"; filename=\"image.\(imageFormat.fileExtension)\"\r\n".data(using: .utf8)!)
        body.append("Content-Type: \(imageFormat.contentType)\r\n\r\n".data(using: .utf8)!)
        body.append(imageData)
        body.append("\r\n".data(using: .utf8)!)
        body.append("--\(boundary)--\r\n".data(using: .utf8)!)
        
        request.httpBody = body
        
        // Log chi ti·∫øt y√™u c·∫ßu
        print("üì§ G·ª≠i y√™u c·∫ßu ƒë·∫øn: \(url.absoluteString)")
        print("üì§ Headers: \(request.allHTTPHeaderFields ?? [:])")
        print("üì§ Body size: \(body.count) bytes")
        
        isLoading = true
        networkManager.performRequest(request, decodeTo: ImageUploadResponse.self)
            .sink { [weak self] completionResult in
                guard let self else { return }
                self.isLoading = false
                switch completionResult {
                case .failure(let error):
                    let errorMessage = (error as? URLError)?.code == .badServerResponse ?
                        "Server g·∫∑p s·ª± c·ªë, vui l√≤ng th·ª≠ l·∫°i sau" :
                        "L·ªói khi t·∫£i ·∫£nh: \(error.localizedDescription)"
                    print("‚ùå \(errorMessage) (Code: \((error as? URLError)?.code.rawValue ?? -1))")
                    self.showToast(message: errorMessage, type: .error)
                    completion(.failure(error))
                case .finished:
                    print("‚úÖ T·∫£i ·∫£nh th√†nh c√¥ng")
                }
            } receiveValue: { [weak self] response in
                guard let self else { return }
                self.images.append(response.data) // Th√™m ·∫£nh m·ªõi v√†o danh s√°ch
                print("üì∏ T·∫£i ·∫£nh th√†nh c√¥ng, URL: \(response.data.url), ID: \(response.data.id)")
                self.showToast(message: "T·∫£i ·∫£nh th√†nh c√¥ng!", type: .success)
                completion(.success(response.data))
            }
            .store(in: &cancellables)
    }
    
    func deleteImage(imageId: Int, completion: @escaping (Result<Void, Error>) -> Void) {
        guard let url = URL(string: "\(APIConfig.baseURL)/images/delete/\(imageId)"),
              let token = UserDefaults.standard.string(forKey: "authToken") else {
            let errorMessage = "Kh√¥ng t√¨m th·∫•y token x√°c th·ª±c ho·∫∑c URL kh√¥ng h·ª£p l·ªá"
            print("‚ùå \(errorMessage)")
            showToast(message: errorMessage, type: .error)
            completion(.failure(NSError(domain: "", code: -1, userInfo: [NSLocalizedDescriptionKey: errorMessage])))
            return
        }
        
        let request = NetworkManager.createRequest(url: url, method: "DELETE", token: token)
        print("üì§ G·ª≠i y√™u c·∫ßu x√≥a ·∫£nh ƒë·∫øn: \(url.absoluteString), method: DELETE")
        isLoading = true
        networkManager.performRequest(request, decodeTo: ImageDeleteResponse.self)
            .sink { [weak self] completionResult in
                guard let self else { return }
                self.isLoading = false
                switch completionResult {
                case .failure(let error):
                    if let urlError = error as? URLError,
                       let httpStatusCode = urlError.userInfo["HTTPStatusCode"] as? Int,
                       httpStatusCode == 404 {
                        print("‚ö†Ô∏è ·∫¢nh ID: \(imageId) kh√¥ng t·ªìn t·∫°i tr√™n server, coi nh∆∞ x√≥a th√†nh c√¥ng")
                        self.showToast(message: "·∫¢nh kh√¥ng t·ªìn t·∫°i, ti·∫øp t·ª•c qu√° tr√¨nh", type: .error)
                        completion(.success(())) // Coi nh∆∞ x√≥a th√†nh c√¥ng
                    } else {
                        print("‚ùå L·ªói khi x√≥a ·∫£nh ID: \(imageId), l·ªói: \(error.localizedDescription)")
                        self.showToast(message: "L·ªói khi x√≥a ·∫£nh: \(error.localizedDescription)", type: .error)
                        completion(.failure(error))
                    }
                case .finished:
                    print("‚úÖ X√≥a ·∫£nh ID: \(imageId) th√†nh c√¥ng")
                    self.showToast(message: "X√≥a ·∫£nh th√†nh c√¥ng!", type: .success)
                    completion(.success(()))
                }
            } receiveValue: { response in
                print("üì• Response x√≥a ·∫£nh: success=\(response.success), message=\(response.message), data=\(response.data)")
            }
            .store(in: &cancellables)
    }
    
    func showToast(message: String, type: ToastType) {
        print("üì¢ ƒê·∫∑t toast: \(message) v·ªõi type: \(type)")
        DispatchQueue.main.async {
            self.toastMessage = message
            self.toastType = type
            self.showToast = true
            DispatchQueue.main.asyncAfter(deadline: .now() + 4) {
                print("üì¢ ·∫®n toast")
                self.showToast = false
                self.toastMessage = nil
                self.toastType = nil
            }
        }
    }
}
