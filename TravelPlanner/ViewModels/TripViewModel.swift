import Foundation
import Combine
import Network

class TripViewModel: ObservableObject {
    @Published var trips: [TripModel] = []
    @Published var isLoading: Bool = false
    @Published var isRefreshing: Bool = false
    @Published var isOffline: Bool = false
    
    @Published var toastMessage: String? = nil
    @Published var showToast: Bool = false
    
    private var cancellables = Set<AnyCancellable>()
    private var pendingTrips: [TripModel] = [] // H√†ng ƒë·ª£i cho c√°c chuy·∫øn ƒëi offline
    private var pendingDeletions: [Int] = [] // H√†ng ƒë·ª£i cho c√°c chuy·∫øn ƒëi b·ªã x√≥a offline
    private let networkMonitor = NWPathMonitor()
    private let queue = DispatchQueue(label: "network.monitor")


    init() {
        setupNetworkMonitor()
        loadFromCache()
        fetchTrips()
    }

    private func setupNetworkMonitor() {
        networkMonitor.pathUpdateHandler = { [weak self] path in
            DispatchQueue.main.async {
                self?.isOffline = path.status != .satisfied
                if !(self?.isOffline ?? true) {
                    self?.syncPendingTrips()
                }
            }
        }
        networkMonitor.start(queue: queue)
    }

    func fetchTrips(completion: (() -> Void)? = nil) {
        // Ki·ªÉm tra v√† s·ª≠ d·ª•ng cache tr∆∞·ªõc
        if let cachedTrips = loadFromCache() {
            self.trips = cachedTrips
            completion?() // G·ªçi completion ngay c·∫£ khi d√πng cache
            if !isOffline {
                // Ch·ªâ g·ªçi API khi c√≥ m·∫°ng ƒë·ªÉ l√†m m·ªõi
                guard let url = URL(string: "https://travel-api-79ct.onrender.com/api/v1/trips") else {
                    print("URL kh√¥ng h·ª£p l·ªá")
                    isLoading = false
                    completion?()
                    return
                }

                guard let token = UserDefaults.standard.string(forKey: "authToken") else {
                    print("Kh√¥ng t√¨m th·∫•y token trong UserDefaults")
                    isLoading = false
                    completion?()
                    return
                }

                print("‚úÖ Token t√¨m th·∫•y: \(token)")

                var request = URLRequest(url: url)
                request.httpMethod = "GET"
                request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")

                isLoading = true
                let config = URLSessionConfiguration.ephemeral
                config.timeoutIntervalForRequest = 20
                config.waitsForConnectivity = true
                
                let decoder = JSONDecoder()
                decoder.dateDecodingStrategy = .iso8601 // X·ª≠ l√Ω ƒë·ªãnh d·∫°ng ng√†y ISO 8601

                let session = URLSession(configuration: config)
                session.dataTaskPublisher(for: request)
                    .tryMap { result -> Data in
                        guard let httpResponse = result.response as? HTTPURLResponse else {
                            throw URLError(.badServerResponse)
                        }
                        guard (200...299).contains(httpResponse.statusCode) else {
                            print("Server tr·∫£ v·ªÅ status code: \(httpResponse.statusCode)")
                            throw URLError(.badServerResponse)
                        }
                        // In JSON th√¥ ƒë·ªÉ debug
                        if let jsonString = String(data: result.data, encoding: .utf8) {
                            print("JSON response: \(jsonString)")
                        }
                        return result.data
                    }
                    .decode(type: TripListResponse.self, decoder: decoder)
                    .receive(on: DispatchQueue.main)
                    .sink { [weak self] completionResult in
                        self?.isLoading = false
                        switch completionResult {
                        case .failure(let error):
                            if let urlError = error as? URLError {
                                print("URLError khi fetch trips: \(urlError)")
                            } else if let decodingError = error as? DecodingError {
                                switch decodingError {
                                case .dataCorrupted(let context):
                                    print("D·ªØ li·ªáu h·ªèng: \(context.debugDescription)")
                                case .keyNotFound(let key, let context):
                                    print("Thi·∫øu key \(key): \(context.debugDescription)")
                                case .typeMismatch(let type, let context):
                                    print("Ki·ªÉu d·ªØ li·ªáu kh√¥ng kh·ªõp \(type): \(context.debugDescription)")
                                case .valueNotFound(let type, let context):
                                    print("Kh√¥ng t√¨m th·∫•y gi√° tr·ªã \(type): \(context.debugDescription)")
                                @unknown default:
                                    print("L·ªói decode kh√¥ng x√°c ƒë·ªãnh: \(decodingError)")
                                }
                            } else {
                                print("L·ªói kh√°c khi fetch trips: \(error.localizedDescription)")
                            }
                            // Gi·ªØ cache c≈© khi th·∫•t b·∫°i
                        case .finished:
                            print("Fetch trips th√†nh c√¥ng")
                        }
                        completion?()
                    } receiveValue: { [weak self] response in
                        guard let self = self else { return }
                        self.trips = response.data
                        self.saveToCache(trips: self.trips)
                    }
                    .store(in: &cancellables)
            } else {
                print("·ª®ng d·ª•ng ƒëang offline, s·ª≠ d·ª•ng cache")
            }
            return
        }

        // N·∫øu kh√¥ng c√≥ cache v√† c√≥ m·∫°ng, g·ªçi API
        if !isOffline {
            guard let url = URL(string: "https://travel-api-79ct.onrender.com/api/v1/trips") else {
                print("URL kh√¥ng h·ª£p l·ªá")
                isLoading = false
                completion?()
                return
            }

            guard let token = UserDefaults.standard.string(forKey: "authToken") else {
                print("Kh√¥ng t√¨m th·∫•y token trong UserDefaults")
                isLoading = false
                completion?()
                return
            }

            print("‚úÖ Token t√¨m th·∫•y: \(token)")

            var request = URLRequest(url: url)
            request.httpMethod = "GET"
            request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")

            isLoading = true
            let config = URLSessionConfiguration.ephemeral
            config.timeoutIntervalForRequest = 20
            config.waitsForConnectivity = true
            
            let decoder = JSONDecoder()
            decoder.dateDecodingStrategy = .iso8601 // X·ª≠ l√Ω ƒë·ªãnh d·∫°ng ng√†y ISO 8601

            let session = URLSession(configuration: config)
            session.dataTaskPublisher(for: request)
                .tryMap { result -> Data in
                    guard let httpResponse = result.response as? HTTPURLResponse else {
                        throw URLError(.badServerResponse)
                    }
                    guard (200...299).contains(httpResponse.statusCode) else {
                        print("Server tr·∫£ v·ªÅ status code: \(httpResponse.statusCode)")
                        throw URLError(.badServerResponse)
                    }
                    // In JSON th√¥ ƒë·ªÉ debug
                    if let jsonString = String(data: result.data, encoding: .utf8) {
                        print("JSON response: \(jsonString)")
                    }
                    return result.data
                }
                .decode(type: TripListResponse.self, decoder: decoder)
                .receive(on: DispatchQueue.main)
                .sink { [weak self] completionResult in
                    self?.isLoading = false
                    switch completionResult {
                    case .failure(let error):
                        if let urlError = error as? URLError {
                            print("URLError khi fetch trips: \(urlError)")
                        } else if let decodingError = error as? DecodingError {
                            switch decodingError {
                            case .dataCorrupted(let context):
                                print("D·ªØ li·ªáu h·ªèng: \(context.debugDescription)")
                            case .keyNotFound(let key, let context):
                                print("Thi·∫øu key \(key): \(context.debugDescription)")
                            case .typeMismatch(let type, let context):
                                print("Ki·ªÉu d·ªØ li·ªáu kh√¥ng kh·ªõp \(type): \(context.debugDescription)")
                            case .valueNotFound(let type, let context):
                                print("Kh√¥ng t√¨m th·∫•y gi√° tr·ªã \(type): \(context.debugDescription)")
                            @unknown default:
                                print("L·ªói decode kh√¥ng x√°c ƒë·ªãnh: \(decodingError)")
                            }
                        } else {
                            print("L·ªói kh√°c khi fetch trips: \(error.localizedDescription)")
                        }
                    case .finished:
                        print("Fetch trips th√†nh c√¥ng")
                    }
                    completion?()
                } receiveValue: { [weak self] response in
                    guard let self = self else { return }
                    self.trips = response.data
                    print("üìã Danh s√°ch trips sau khi fetch:")
                    for trip in self.trips {
                        print("üß≥ Trip ID: \(trip.id) - \(trip.name)")
                    }
                    self.saveToCache(trips: self.trips)
                    
                }
                .store(in: &cancellables)
        } else {
            print("·ª®ng d·ª•ng ƒëang offline v√† kh√¥ng c√≥ cache")
            isLoading = false
            completion?()
        }
    }

    func addTrip(name: String, description: String?, startDate: String, endDate: String, status: String) {
        let tempTrip = TripModel(
            id: -1,
            name: name,
            description: description,
            startDate: startDate,
            endDate: endDate,
            status: isOffline ? "draft" : "active",
            createdByUserId: UserDefaults.standard.integer(forKey: "userId"),
            createdAt: Date().description,
            updatedAt: Date().description,
            tripParticipants: []
        )

        if isOffline {
            pendingTrips.append(tempTrip)
            savePendingTrips()
            trips.append(tempTrip)
            saveToCache(trips: trips)
            if let cached = loadFromCache() {
                    self.trips = cached
                }
            showToast(message: "M·∫°ng y·∫øu, ƒë√£ l∆∞u offline!")
            return
        }

        guard let url = URL(string: "https://travel-api-79ct.onrender.com/api/v1/trips"),
              let token = UserDefaults.standard.string(forKey: "authToken") else {
            print("‚ùå URL ho·∫∑c Token kh√¥ng h·ª£p l·ªá")
            return
        }

        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")

        let tripData: [String: Any] = [
            "name": name,
            "description": description ?? "",
            "start_date": startDate,
            "end_date": endDate,
            "status": status,
            "created_by_user_id": UserDefaults.standard.integer(forKey: "userId")
        ]

        do {
            let jsonData = try JSONSerialization.data(withJSONObject: tripData)
            request.httpBody = jsonData
        } catch {
            print("‚ùå JSON Encoding Error: \(error)")
            pendingTrips.append(tempTrip)
            savePendingTrips()
            trips.append(tempTrip)
            saveToCache(trips: trips)
            return
        }

        isLoading = true
        let config = URLSessionConfiguration.ephemeral
        config.timeoutIntervalForRequest = 20
        config.waitsForConnectivity = true

        let session = URLSession(configuration: config)
        session.dataTaskPublisher(for: request)
            .tryMap { result -> Data in
                guard let httpResponse = result.response as? HTTPURLResponse,
                      (200...299).contains(httpResponse.statusCode) else {
                    throw URLError(.badServerResponse)
                }
                return result.data
            }
            .decode(type: TripSingleResponse.self, decoder: JSONDecoder())
            .receive(on: DispatchQueue.main)
            .sink { [weak self] completion in
                self?.isLoading = false
                if case let .failure(error) = completion {
                    print("‚ùå Th√™m trip th·∫•t b·∫°i: \(error.localizedDescription)")
                    
                    // Decode error chi ti·∫øt
                    if let decodingError = error as? DecodingError {
                        switch decodingError {
                        case .dataCorrupted(let context): print("üîç Data corrupted: \(context.debugDescription)")
                        case .keyNotFound(let key, let context): print("üîç Key '\(key)' not found: \(context.debugDescription)")
                        case .typeMismatch(let type, let context): print("üîç Type '\(type)' mismatch: \(context.debugDescription)")
                        case .valueNotFound(let type, let context): print("üîç Value '\(type)' not found: \(context.debugDescription)")
                        @unknown default: print("L·ªói decode kh√¥ng x√°c ƒë·ªãnh")
                        }
                    }

                    // N·∫øu m·∫•t m·∫°ng
                    if (error as? URLError)?.code == .notConnectedToInternet {
                        self?.pendingTrips.append(tempTrip)
                        self?.savePendingTrips()
                        self?.trips.append(tempTrip)
                        self?.showToast(message:"M·∫°ng y·∫øu, ƒë√£ l∆∞u offline!")
                        self?.saveToCache(trips: self?.trips ?? [])
                    }
                }
            } receiveValue: { [weak self] response in
                let trip = response.data
                self?.trips.append(trip)
                print("‚úÖ Trip m·ªõi th√™m c√≥ id: \(trip.id)")
                self?.saveToCache(trips: self?.trips ?? [])
                self?.fetchTrips()
                self?.showToast(message: "Th√™m chuy·∫øn ƒëi th√†nh c√¥ng!")
                


            }
            .store(in: &cancellables)
    }



    func deleteTrip(id: Int, completion: @escaping (Bool) -> Void) {
        print("üìã Danh s√°ch trips hi·ªán c√≥ tr∆∞·ªõc khi xo√°:")
        for trip in trips {
            print("üß≥ Trip ID: \(trip.id) - \(trip.name)")
        }

        guard let token = UserDefaults.standard.string(forKey: "authToken") else {
            print("Kh√¥ng t√¨m th·∫•y token trong UserDefaults")
            completion(false)
            return
        }

        guard let url = URL(string: "https://travel-api-79ct.onrender.com/api/v1/trips/\(id)") else {
            print("URL kh√¥ng h·ª£p l·ªá")
            completion(false)
            return
        }

        if isOffline {
            print("üö´ Kh√¥ng th·ªÉ x√≥a khi offline. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.")
            completion(false)
            return
        }

        var request = URLRequest(url: url)
        request.httpMethod = "DELETE"
        request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")

        isLoading = true
        let config = URLSessionConfiguration.ephemeral
        config.timeoutIntervalForRequest = 20
        config.waitsForConnectivity = true

        let session = URLSession(configuration: config)
        session.dataTaskPublisher(for: request)
            .tryMap { result -> Void in
                guard let httpResponse = result.response as? HTTPURLResponse else {
                    throw URLError(.badServerResponse)
                }
                guard (200...299).contains(httpResponse.statusCode) else {
                    print("Server tr·∫£ v·ªÅ status code: \(httpResponse.statusCode)")
                    throw URLError(.badServerResponse)
                }
            }
            .receive(on: DispatchQueue.main)
            .sink { [weak self] completionResult in
                self?.isLoading = false
                switch completionResult {
                case .failure(let error):
                    print("L·ªói khi x√≥a trip: \(error.localizedDescription)")
                    completion(false)
                case .finished:
                    print("‚úÖ X√≥a trip th√†nh c√¥ng")
                    self?.showToast(message: "Xo√° chuy·∫øn ƒëi th√†nh c√¥ng!")
                    completion(true)
                }
            } receiveValue: { [weak self] _ in
                guard let self = self else { return }
                if let index = self.trips.firstIndex(where: { $0.id == id }) {
                    self.trips.remove(at: index)
                    self.saveToCache(trips: self.trips)
                    completion(true)
                } else {
                    print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y trip trong local list sau khi xo√° t·ª´ server.")
                }
            }
            .store(in: &self.cancellables)
    }



    func refreshTrips() {
        isRefreshing = true
        UserDefaults.standard.removeObject(forKey: "trips_cache")
        fetchTrips {
                self.isRefreshing = false
            }
    }

    private func saveToCache(trips: [TripModel]) {
        do {
            let data = try JSONEncoder().encode(trips)
            UserDefaults.standard.set(data, forKey: "trips_cache")
        } catch {
            print("L·ªói khi l∆∞u cache: \(error.localizedDescription)")
        }
    }

    private func loadFromCache() -> [TripModel]? {
        guard let data = UserDefaults.standard.data(forKey: "trips_cache") else {
            return nil
        }
        
        do {
            let trips = try JSONDecoder().decode([TripModel].self, from: data)
            return trips
        } catch {
            print("L·ªói khi ƒë·ªçc cache: \(error.localizedDescription)")
            return nil
        }
    }

    private func savePendingTrips() {
        do {
            let data = try JSONEncoder().encode(pendingTrips)
            UserDefaults.standard.set(data, forKey: "pending_trips")
        } catch {
            print("L·ªói khi l∆∞u pending trips: \(error.localizedDescription)")
        }
    }

    private func loadPendingTrips() -> [TripModel] {
        guard let data = UserDefaults.standard.data(forKey: "pending_trips") else {
            return []
        }
        do {
            let trips = try JSONDecoder().decode([TripModel].self, from: data)
            return trips
        } catch {
            print("L·ªói khi ƒë·ªçc pending trips: \(error.localizedDescription)")
            return []
        }
    }

    private func syncPendingTrips() {
        pendingTrips = loadPendingTrips()
        guard !pendingTrips.isEmpty else { return }
        
        for trip in pendingTrips {
            addTrip(
                name: trip.name,
                description: trip.description,
                startDate: trip.startDate,
                endDate: trip.endDate,
                status: trip.status
            )
        }
        pendingTrips.removeAll()
        UserDefaults.standard.removeObject(forKey: "pending_trips")
    }

    // H√†m placeholder cho WebSocket (s·∫Ω t√≠ch h·ª£p sau)
    func handleTripUpdate(_ trip: TripModel) {
        if let index = trips.firstIndex(where: { $0.id == trip.id }) {
            trips[index] = trip
            saveToCache(trips: trips)
        }
    }
    
    func showToast(message: String) {
        print("üì¢ ƒê·∫∑t toast: \(message)")
        self.toastMessage = message
        self.showToast = true
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 2) {
            print("üì¢ ·∫®n toast")
            self.showToast = false
            self.toastMessage = nil
        }
    }


}
