import Foundation

class TripViewModel: ObservableObject {
    @Published var trips: [TripModel]

    static let dateOnlyFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "dd/MM/yyyy"
        return formatter
    }()

    static let dateTimeFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "dd/MM/yyyy HH:mm"
        return formatter
    }()
    // Dummy Members
    static let sampleMembers: [TripMember] = [
        TripMember(name: "VƒÉn An"),
        TripMember(name: "Ch√≠ B√¨nh"),
        TripMember(name: "Chi Chi"),
        TripMember(name: "L√™ Th·ªã Thanh Huy·ªÅn", role: "Ng∆∞·ªùi l√™n k·∫ø ho·∫°ch"),
        TripMember(name: "Tr·∫ßn Ho√†ng H∆∞ng"),
        TripMember(name: "Tr·∫ßn Ho√†ng Ph√∫c"),
        TripMember(name: "Nguy·ªÖn Qu·ªëc Trung"),
        TripMember(name: "Ch√≠ B√¨nh"),
        TripMember(name: "Chi Chi"),
        TripMember(name: "VƒÉn An"),
        TripMember(name: "Ch√≠ B√¨nh"),
        TripMember(name: "Chi Chi"),
        TripMember(name: "VƒÉn An"),
        TripMember(name: "Ch√≠ B√¨nh"),
        TripMember(name: "Chi Chi"),
        TripMember(name: "VƒÉn An"),
        TripMember(name: "Ch√≠ B√¨nh"),
        TripMember(name: "Chi Chi"),
        
    ]

    // Dummy Packing List
    static let samplePackingList: [PackingItem] = [
        PackingItem(name: "L·ªÅu", isShared: true, isPacked: false, ownerId: nil),
        PackingItem(name: "ƒê√®n pin", isShared: true, isPacked: true, ownerId: nil),
        PackingItem(name: "√Åo kho√°c", isShared: false, isPacked: false, ownerId: sampleMembers[0].id),
        PackingItem(name: "B√†n ch·∫£i", isShared: false, isPacked: true, ownerId: sampleMembers[1].id)
        ]
    

    static let sampleActivities: [TripActivity] = [
        TripActivity(
            date: TripViewModel.dateOnlyFormatter.date(from: "30/06/2025") ?? Date(),
            startTime: TripViewModel.dateTimeFormatter.date(from: "30/06/2025 06:00") ?? Date(),
            endTime: TripViewModel.dateTimeFormatter.date(from: "30/06/2025 08:00") ?? Date(),
            name: "ƒêi oto t·ª´ HN v√†o Hu·∫ø",
            address: "669 Gi·∫£i Ph√≥ng",
            estimatedCost: 400_000,
            actualCost: 800_000,
            note: "Nh√† xe Minh M·∫≠p\n0905347000"
        ),
        
        TripActivity(
            date: TripViewModel.dateOnlyFormatter.date(from: "30/06/2025") ?? Date(),
            startTime: TripViewModel.dateTimeFormatter.date(from: "30/06/2025 09:00") ?? Date(),
            endTime: TripViewModel.dateTimeFormatter.date(from: "30/06/2025 10:00") ?? Date(),
            name: "ƒêi ch·ª£ ƒê√¥ng Ba",
            address: "475 ƒê. Chi LƒÉng, t·ªï 9, TP Hu·∫ø, Th·ª´a Thi√™n Hu·∫ø",
            estimatedCost: 0,
            actualCost: 0,
            note: nil
        ),
        
        TripActivity(
            date: TripViewModel.dateOnlyFormatter.date(from: "30/06/2025") ?? Date(),
            startTime: TripViewModel.dateTimeFormatter.date(from: "30/06/2025 12:00") ?? Date(),
            endTime: TripViewModel.dateTimeFormatter.date(from: "30/06/2025 14:00") ?? Date(),
            name: "ƒÇn tr∆∞a t·∫°i C·∫ßu Tr∆∞·ªùng Ti·ªÅn",
            address: "Qu√°n b√°nh l·ªçc M·ªá S·ª≠u, c·∫ßu Tr∆∞·ªùng Ti·ªÅn",
            estimatedCost: 100_000,
            actualCost: 120_000,
            note: "ƒÇn b√°nh l·ªçc + ch√®"
        ),
        
        TripActivity(
            date: TripViewModel.dateOnlyFormatter.date(from: "30/06/2025") ?? Date(),
            startTime: TripViewModel.dateTimeFormatter.date(from: "30/06/2025 16:00") ?? Date(),
            endTime: TripViewModel.dateTimeFormatter.date(from: "30/06/2025 18:00") ?? Date(),
            name: "ƒÇn b√∫n b√≤ + u·ªëng s·ªØa ƒë·∫≠u",
            address: "Qu√°n B√∫n B√≤ 3A L√™ L·ª£i",
            estimatedCost: 50_000,
            actualCost: 50_000,
            note: nil
        )
    ]


    static let dummyTrips: [TripModel] = [
        TripModel(name: "ƒê√† L·∫°t We Coming ü§ü", startDate: "30/06/2025", endDate: "07/07/2025", image: nil, activities: sampleActivities, members: sampleMembers, packingList: samplePackingList),
        TripModel(name: "Cu ƒê√™ Camping", startDate: "30/06/2025", endDate: "03/07/2025", image: nil, activities: sampleActivities, members: sampleMembers, packingList: samplePackingList),
        TripModel(name: "H√† Giang Trip", startDate: "30/06/2025", endDate: "03/07/2025", image: nil, activities: sampleActivities, members: sampleMembers, packingList: samplePackingList),
        TripModel(name: "ƒê√† L·∫°t We Coming ü§ü", startDate: "30/06/2025", endDate: "07/07/2025", image: nil, activities: sampleActivities, members: sampleMembers, packingList: samplePackingList),
        TripModel(name: "Cu ƒê√™ Camping", startDate: "30/06/2025", endDate: "03/07/2025", image: nil, activities: sampleActivities, members: sampleMembers, packingList: samplePackingList),
        TripModel(name: "H√† Giang Trip", startDate: "30/06/2025", endDate: "03/07/2025", image: nil, activities: sampleActivities, members: sampleMembers, packingList: samplePackingList),
        TripModel(name: "ƒê√† L·∫°t We Coming ü§ü", startDate: "30/06/2025", endDate: "07/07/2025", image: nil, activities: sampleActivities, members: sampleMembers, packingList: samplePackingList),
        TripModel(name: "Cu ƒê√™ Camping", startDate: "30/06/2025", endDate: "03/07/2025", image: nil, activities: sampleActivities, members: sampleMembers, packingList: samplePackingList),
        TripModel(name: "H√† Giang Trip", startDate: "30/06/2025", endDate: "03/07/2025", image: nil, activities: sampleActivities, members: sampleMembers, packingList: samplePackingList),
    ]

    init() {
        self.trips = Self.dummyTrips
    }
}
