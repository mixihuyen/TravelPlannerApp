import Foundation
import Combine
import SwiftUI
import Cloudinary

class ActivityImagesViewModel: ObservableObject {
    @Published var images: [ActivityImage] = []
    @Published var isLoading: Bool = false
    @Published var toastMessage: String? = nil
    @Published var showToast: Bool = false
    
    private var cancellables = Set<AnyCancellable>()
    private let networkManager = NetworkManager()
    private let cloudinaryManager = CloudinaryManager()
    
    func fetchImages(tripId: Int, tripDayId: Int, activityId: Int, completion: (() -> Void)? = nil) {
        guard let url = URL(string: "\(APIConfig.baseURL)\(APIConfig.tripsEndpoint)/\(tripId)/days/\(tripDayId)/activities/\(activityId)/images"),
              let token = UserDefaults.standard.string(forKey: "authToken") else {
            print("‚ùå Kh√¥ng t√¨m th·∫•y token x√°c th·ª±c ho·∫∑c URL kh√¥ng h·ª£p l·ªá")
            DispatchQueue.main.async {
                self.showToast(message: "Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i")
                self.isLoading = false
            }
            completion?()
            return
        }
        
        print("üì§ Fetch images for tripId: \(tripId), tripDayId: \(tripDayId), activityId: \(activityId), authToken: \(token)")
        
        let request = NetworkManager.createRequest(url: url, method: "GET", token: token)
        isLoading = true
        networkManager.performRequest(request, decodeTo: ActivityImagesFetchResponse.self)
            .sink { [weak self] completionResult in
                guard let self else { return }
                DispatchQueue.main.async {
                    self.isLoading = false
                    switch completionResult {
                    case .failure(let error):
                        print("‚ùå Fetch images failed: \(error.localizedDescription)")
                        print("üîç URL: \(request.url?.absoluteString ?? "N/A")")
                        if let urlError = error as? URLError {
                            switch urlError.code {
                            case .badServerResponse:
                                self.showToast(message: "L·ªói server, vui l√≤ng th·ª≠ l·∫°i")
                            case .notConnectedToInternet:
                                self.showToast(message: "Kh√¥ng c√≥ k·∫øt n·ªëi m·∫°ng")
                            case .timedOut:
                                self.showToast(message: "Y√™u c·∫ßu t·∫£i ·∫£nh h·∫øt th·ªùi gian, vui l√≤ng th·ª≠ l·∫°i")
                            default:
                                self.showToast(message: "L·ªói khi t·∫£i ·∫£nh: \(error.localizedDescription)")
                            }
                        } else if let decodingError = error as? DecodingError {
                            print("üîç Decoding error: \(decodingError)")
                            self.showToast(message: "D·ªØ li·ªáu t·ª´ server kh√¥ng h·ª£p l·ªá")
                        } else {
                            self.showToast(message: "L·ªói khi t·∫£i ·∫£nh: \(error.localizedDescription)")
                        }
                    case .finished:
                        print("‚úÖ Fetch images completed")
                    }
                    completion?()
                }
            } receiveValue: { [weak self] response in
                guard let self else { return }
                DispatchQueue.main.async {
                    print("üì• API response: \(response)")
                    // L·ªçc c√°c ·∫£nh c√≥ imageUrl t·ª´ Cloudinary
                    self.images = response.data.filter { image in
                        guard let urlString = image.imageUrl else {
                            print("‚ö†Ô∏è Image ID: \(image.id) has nil imageUrl")
                            return false
                        }
                        let isCloudinary = urlString.lowercased().contains("res.cloudinary.com")
                        if !isCloudinary {
                            print("‚ö†Ô∏è Image ID: \(image.id) filtered out (not Cloudinary): \(urlString)")
                        }
                        return isCloudinary
                    }
                    self.images.forEach { image in
                        print("üì∏ Image ID: \(image.id), URL: \(String(describing: image.imageUrl))")
                    }
                }
            }
            .store(in: &cancellables)
    }
    
    func uploadImage(tripId: Int, tripDayId: Int, activityId: Int, image: UIImage) {
        print("üì§ B·∫Øt ƒë·∫ßu t·∫£i ·∫£nh l√™n Cloudinary")
        isLoading = true
        // N√©n ·∫£nh ƒë·ªÉ gi·∫£m k√≠ch th∆∞·ªõc
        guard let compressedImageData = image.jpegData(compressionQuality: 0.7),
              let compressedImage = UIImage(data: compressedImageData) else {
            print("‚ùå Kh√¥ng th·ªÉ n√©n h√¨nh ·∫£nh")
            DispatchQueue.main.async {
                self.isLoading = false
                self.showToast(message: "H√¨nh ·∫£nh kh√¥ng h·ª£p l·ªá")
            }
            return
        }
        
        cloudinaryManager.uploadImage(image: compressedImage) { [weak self] result in
            guard let self else { return }
            DispatchQueue.main.async {
                switch result {
                case .success(let (imageUrl, publicId)):
                    print("‚úÖ T·∫£i ·∫£nh l√™n Cloudinary th√†nh c√¥ng: \(imageUrl), publicId: \(publicId)")
                    // Ki·ªÉm tra URL h·ª£p l·ªá tr∆∞·ªõc khi g·ª≠i
                    if imageUrl.lowercased().contains("res.cloudinary.com") {
                        self.sendImageUrlToApi(tripId: tripId, tripDayId: tripDayId, activityId: activityId, imageUrl: imageUrl)
                    } else {
                        self.isLoading = false
                        print("‚ùå URL t·ª´ Cloudinary kh√¥ng h·ª£p l·ªá: \(imageUrl)")
                        self.showToast(message: "URL ·∫£nh t·ª´ Cloudinary kh√¥ng h·ª£p l·ªá")
                    }
                case .failure(let error):
                    self.isLoading = false
                    print("‚ùå L·ªói khi t·∫£i ·∫£nh l√™n Cloudinary: \(error.localizedDescription)")
                    self.showToast(message: "L·ªói khi t·∫£i ·∫£nh l√™n: \(error.localizedDescription)")
                }
            }
        }
    }
    
    private func sendImageUrlToApi(tripId: Int, tripDayId: Int, activityId: Int, imageUrl: String) {
        guard let url = URL(string: "\(APIConfig.baseURL)\(APIConfig.tripsEndpoint)/\(tripId)/days/\(tripDayId)/activities/\(activityId)/images"),
              let token = UserDefaults.standard.string(forKey: "authToken") else {
            DispatchQueue.main.async {
                self.isLoading = false
                print("‚ùå Kh√¥ng t√¨m th·∫•y token x√°c th·ª±c ho·∫∑c URL kh√¥ng h·ª£p l·ªá")
                self.showToast(message: "Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i")
            }
            return
        }
        
        let body: [String: String] = ["image_url": imageUrl]
        guard let requestBody = try? JSONEncoder().encode(body) else {
            DispatchQueue.main.async {
                self.isLoading = false
                print("‚ùå JSON Encoding Error")
                self.showToast(message: "L·ªói m√£ h√≥a d·ªØ li·ªáu")
            }
            return
        }
        
        print("üì§ G·ª≠i image_url: \(imageUrl) l√™n API")
        let request = NetworkManager.createRequest(url: url, method: "POST", token: token, body: requestBody)
        networkManager.performRequest(request, decodeTo: ActivityImageCreateResponse.self)
            .sink { [weak self] completionResult in
                guard let self else { return }
                DispatchQueue.main.async {
                    self.isLoading = false
                    switch completionResult {
                    case .failure(let error):
                        print("‚ùå L·ªói khi g·ª≠i URL ·∫£nh l√™n API: \(error.localizedDescription)")
                        if let urlError = error as? URLError {
                            switch urlError.code {
                            case .badServerResponse:
                                self.showToast(message: "L·ªói server, vui l√≤ng th·ª≠ l·∫°i")
                            case .notConnectedToInternet:
                                self.showToast(message: "Kh√¥ng c√≥ k·∫øt n·ªëi m·∫°ng")
                            default:
                                self.showToast(message: "L·ªói khi g·ª≠i ·∫£nh: \(error.localizedDescription)")
                            }
                        } else if let decodingError = error as? DecodingError {
                            print("üîç Decoding error: \(decodingError)")
                            self.showToast(message: "D·ªØ li·ªáu t·ª´ server kh√¥ng h·ª£p l·ªá")
                        } else {
                            self.showToast(message: "L·ªói khi g·ª≠i ·∫£nh: \(error.localizedDescription)")
                        }
                    case .finished:
                        print("‚úÖ G·ª≠i URL ·∫£nh l√™n API th√†nh c√¥ng")
                    }
                }
            } receiveValue: { [weak self] response in
                guard let self else { return }
                DispatchQueue.main.async {
                    print("üì• API response for upload: \(response)")
                    if response.success, let urlString = response.data.imageUrl,
                       urlString.lowercased().contains("res.cloudinary.com") {
                        self.images.append(response.data)
                        print("‚ûï Th√™m ·∫£nh m·ªõi ID: \(response.data.id), URL: \(String(describing: response.data.imageUrl))")
                        self.showToast(message: "T·∫£i ·∫£nh l√™n th√†nh c√¥ng!")
                    } else {
                        self.showToast(message: "URL ·∫£nh kh√¥ng h·ª£p l·ªá t·ª´ API")
                        print("‚ùå Invalid or nil URL in API response: \(String(describing: response.data.imageUrl))")
                    }
                }
            }
            .store(in: &cancellables)
    }
    
    private func showToast(message: String) {
        print("üì¢ ƒê·∫∑t toast: \(message)")
        toastMessage = message
        showToast = true
        DispatchQueue.main.asyncAfter(deadline: .now() + 2) {
            print("üì¢ ·∫®n toast")
            self.showToast = false
            self.toastMessage = nil
        }
    }
}
