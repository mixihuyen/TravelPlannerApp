import Foundation
import Combine
import SwiftUI
import Network

class ActivityImagesViewModel: ObservableObject {
    @Published var images: [ImageData] = []
        @Published var isLoading: Bool = false
        @Published var toastMessage: String?
        @Published var showToast: Bool = false
        @Published var toastType: ToastType?
        private var cancellables = Set<AnyCancellable>()
        private let networkManager = NetworkManager()
        private let imageViewModel = ImageViewModel()
    
    func fetchImages(tripId: Int, tripDayId: Int, activityId: Int, completion: (() -> Void)? = nil) {
        guard networkManager.isNetworkAvailable else {
            print("üåê M·∫•t m·∫°ng, kh√¥ng th·ªÉ l·∫•y danh s√°ch ·∫£nh")
            DispatchQueue.main.async {
                self.images = []
                self.isLoading = false
                completion?()
            }
            return
        }

        guard let url = URL(string: "\(APIConfig.baseURL)\(APIConfig.tripsEndpoint)/\(tripId)/days/\(tripDayId)/activities/\(activityId)/images"),
              let token = UserDefaults.standard.string(forKey: "authToken") else {
            print("‚ùå URL ho·∫∑c token kh√¥ng h·ª£p l·ªá")
            DispatchQueue.main.async {
                self.images = []
                self.isLoading = false
                completion?()
            }
            return
        }

        print("üì§ Sending request to: \(url.absoluteString), method: GET")
        isLoading = true
        let request = NetworkManager.createRequest(url: url, method: "GET", token: token)
        
        networkManager.performRequest(request, decodeTo: ActivityImagesResponse.self)
            .sink { [weak self] completionResult in
                guard let self else { return }
                switch completionResult {
                case .failure(let error):
                    print("‚ùå L·ªói khi l·∫•y danh s√°ch ·∫£nh: \(error)")
                    DispatchQueue.main.async {
                        self.images = []
                        self.isLoading = false 
                        completion?()
                    }
                case .finished:
                    print("‚úÖ L·∫•y danh s√°ch ·∫£nh th√†nh c√¥ng")
                    DispatchQueue.main.async {
                        self.isLoading = false
                        completion?()
                    }
                }
            } receiveValue: { [weak self] response in
                guard let self else { return }
                DispatchQueue.main.async {
                    self.images = response.data ?? []
                    print("üì• Nh·∫≠n ƒë∆∞·ª£c \(self.images.count) ·∫£nh: \(self.images.map { "id: \($0.id), url: \($0.url)" })")
                }
            }
            .store(in: &cancellables)
    }

    func uploadImages(tripId: Int, tripDayId: Int, activityId: Int, images: [UIImage], activityViewModel: ActivityViewModel, completion: (() -> Void)? = nil) {
        guard networkManager.isNetworkAvailable else {
            print("üåê M·∫•t m·∫°ng, kh√¥ng th·ªÉ t·∫£i ·∫£nh l√™n")
            DispatchQueue.main.async {
                activityViewModel.showToast(message: "Kh√¥ng th·ªÉ t·∫£i ·∫£nh l√™n khi kh√¥ng c√≥ k·∫øt n·ªëi m·∫°ng", type: .error)
                self.isLoading = false
                completion?()
            }
            return
        }

        guard !images.isEmpty else {
            print("‚ùå Kh√¥ng c√≥ ·∫£nh n√†o ƒë∆∞·ª£c ch·ªçn")
            DispatchQueue.main.async {
                activityViewModel.showToast(message: "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt ·∫£nh", type: .error)
                self.isLoading = false
                completion?()
            }
            return
        }

        // L·∫•y activity hi·ªán t·∫°i t·ª´ activityViewModel
        guard let currentActivity = activityViewModel.activities.first(where: { $0.id == activityId }) else {
            print("‚ùå Kh√¥ng t√¨m th·∫•y activity v·ªõi ID: \(activityId)")
            DispatchQueue.main.async {
                activityViewModel.showToast(message: "Kh√¥ng t√¨m th·∫•y ho·∫°t ƒë·ªông", type: .error)
                self.isLoading = false
                completion?()
            }
            return
        }

        isLoading = true
        var uploadedImageIds: [Int] = []
        let group = DispatchGroup()

        for image in images {
            guard let imageData = image.jpegData(compressionQuality: 0.7) else {
                print("‚ùå Kh√¥ng th·ªÉ n√©n h√¨nh ·∫£nh")
                DispatchQueue.main.async {
                    activityViewModel.showToast(message: "M·ªôt ho·∫∑c nhi·ªÅu h√¨nh ·∫£nh kh√¥ng h·ª£p l·ªá", type: .error)
                    self.isLoading = false
                    completion?()
                }
                return
            }

            group.enter()
            imageViewModel.uploadImage(imageData) { [weak self] result in
                guard let self else {
                    group.leave()
                    return
                }
                switch result {
                case .success(let imageInfo):
                    print("‚úÖ T·∫£i ·∫£nh l√™n th√†nh c√¥ng, URL: \(imageInfo.url), ID: \(imageInfo.id)")
                    uploadedImageIds.append(imageInfo.id)
                case .failure(let error):
                    print("‚ùå L·ªói khi t·∫£i ·∫£nh l√™n: \(error.localizedDescription)")
                    DispatchQueue.main.async {
                        activityViewModel.showToast(message: "L·ªói khi t·∫£i ·∫£nh l√™n: \(error.localizedDescription)", type: .error)
                    }
                }
                group.leave()
            }
        }

        group.notify(queue: .main) { [weak self] in
            guard let self else {
                completion?()
                return
            }

            if uploadedImageIds.isEmpty {
                print("‚ùå Kh√¥ng c√≥ ·∫£nh n√†o ƒë∆∞·ª£c t·∫£i l√™n th√†nh c√¥ng")
                self.isLoading = false
                activityViewModel.showToast(message: "Kh√¥ng th·ªÉ t·∫£i l√™n b·∫•t k·ª≥ ·∫£nh n√†o", type: .error)
                completion?()
                return
            }

            // G·ªçi updateActivityImages t·ª´ ActivityViewModel
            activityViewModel.updateActivityImages(tripDayId: tripDayId, activity: currentActivity, imageIds: uploadedImageIds) { result in
                switch result {
                case .success(let updatedActivity):
                    print("‚úÖ C·∫≠p nh·∫≠t activity v·ªõi \(uploadedImageIds.count) ·∫£nh th√†nh c√¥ng")
                    // Fetch l·∫°i danh s√°ch ·∫£nh ƒë·ªÉ c·∫≠p nh·∫≠t UI
                    self.fetchImages(tripId: tripId, tripDayId: tripDayId, activityId: activityId) {
                        DispatchQueue.main.async {
                            activityViewModel.showToast(message: "T·∫£i v√† c·∫≠p nh·∫≠t \(uploadedImageIds.count) ·∫£nh th√†nh c√¥ng!", type: .success)
                            self.isLoading = false
                            completion?()
                        }
                    }
                case .failure(let error):
                    print("‚ùå L·ªói khi c·∫≠p nh·∫≠t activity: \(error.localizedDescription)")
                    DispatchQueue.main.async {
                        activityViewModel.showToast(message: "L·ªói khi c·∫≠p nh·∫≠t ·∫£nh: \(error.localizedDescription)", type: .error)
                        self.isLoading = false
                        completion?()
                    }
                }
            }
        }
        
    }
    func deleteImage(tripId: Int, tripDayId: Int, activityId: Int, imageId: Int, activityViewModel: ActivityViewModel, completion: @escaping (Result<Void, Error>) -> Void) {
            guard networkManager.isNetworkAvailable else {
                print("üåê M·∫•t m·∫°ng, kh√¥ng th·ªÉ x√≥a ·∫£nh")
                DispatchQueue.main.async {
                    activityViewModel.showToast(message: "Kh√¥ng th·ªÉ x√≥a ·∫£nh khi kh√¥ng c√≥ k·∫øt n·ªëi m·∫°ng", type: .error)
                    self.isLoading = false
                    completion(.failure(NSError(domain: "", code: -1, userInfo: [NSLocalizedDescriptionKey: "Kh√¥ng c√≥ k·∫øt n·ªëi m·∫°ng"])))
                }
                return
            }

            // X√≥a ·∫£nh kh·ªèi danh s√°ch c·ª•c b·ªô tr∆∞·ªõc
            images.removeAll { $0.id == imageId }
            print("üì∏ ƒê√£ x√≥a ·∫£nh ID: \(imageId) kh·ªèi danh s√°ch c·ª•c b·ªô")

            // T√¨m activity hi·ªán t·∫°i
            guard let currentActivity = activityViewModel.activities.first(where: { $0.id == activityId }) else {
                print("‚ùå Kh√¥ng t√¨m th·∫•y activity v·ªõi ID: \(activityId)")
                DispatchQueue.main.async {
                    activityViewModel.showToast(message: "Kh√¥ng t√¨m th·∫•y ho·∫°t ƒë·ªông", type: .error)
                    self.isLoading = false
                    completion(.failure(NSError(domain: "", code: -1, userInfo: [NSLocalizedDescriptionKey: "Kh√¥ng t√¨m th·∫•y ho·∫°t ƒë·ªông"])))
                }
                return
            }

            // L·∫•y danh s√°ch image IDs hi·ªán t·∫°i v√† lo·∫°i b·ªè imageId c·∫ßn x√≥a
            let existingImageIds = currentActivity.activityImages?.map { $0.id } ?? []
            let updatedImageIds = existingImageIds.filter { $0 != imageId }
            print("üì∏ Existing image IDs: \(existingImageIds)")
            print("üì∏ Updated image IDs after deletion: \(updatedImageIds)")

            // G·ªçi updateActivityImages ƒë·ªÉ c·∫≠p nh·∫≠t activity tr√™n server
            isLoading = true
            activityViewModel.updateActivityImages(tripDayId: tripDayId, activity: currentActivity, imageIds: updatedImageIds) { [weak self] result in
                guard let self else {
                    completion(.failure(NSError(domain: "", code: -1, userInfo: [NSLocalizedDescriptionKey: "L·ªói kh√¥ng x√°c ƒë·ªãnh"])))
                    return
                }
                self.isLoading = false
                switch result {
                case .success(let updatedActivity):
                    print("‚úÖ C·∫≠p nh·∫≠t activity sau khi x√≥a ·∫£nh th√†nh c√¥ng")
                    self.showToast(message: "X√≥a ·∫£nh th√†nh c√¥ng!", type: .success)
                    completion(.success(()))
                case .failure(let error):
                    print("‚ùå L·ªói khi c·∫≠p nh·∫≠t activity sau khi x√≥a ·∫£nh: \(error.localizedDescription)")
                    // Ph·ª•c h·ªìi danh s√°ch ·∫£nh c·ª•c b·ªô n·∫øu API th·∫•t b·∫°i
                    self.fetchImages(tripId: tripId, tripDayId: tripDayId, activityId: activityId)
                    self.showToast(message: "L·ªói khi x√≥a ·∫£nh: \(error.localizedDescription)", type: .error)
                    completion(.failure(error))
                }
            }
        }

         func showToast(message: String, type: ToastType) {
            print("üì¢ Setting toast: \(message) with type: \(type)")
            DispatchQueue.main.async {
                self.toastMessage = message
                self.toastType = type
                self.showToast = true
                DispatchQueue.main.asyncAfter(deadline: .now() + 4) {
                    print("üì¢ Hiding toast")
                    self.showToast = false
                    self.toastMessage = nil
                    self.toastType = nil
                }
            }
        }
}
